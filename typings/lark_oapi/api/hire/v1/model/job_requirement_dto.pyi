from .id_name_object import IdNameObject as IdNameObject
from .job_requirement_customized_data_dto import JobRequirementCustomizedDataDto as JobRequirementCustomizedDataDto
from .job_type_info import JobTypeInfo as JobTypeInfo
from lark_oapi.core.construct import init as init

class JobRequirementDto:
    id: str | None
    short_code: str | None
    name: str | None
    display_progress: int | None
    head_count: int | None
    recruitment_type: IdNameObject | None
    employee_type: IdNameObject | None
    max_level: IdNameObject | None
    min_level: IdNameObject | None
    sequence: IdNameObject | None
    category: int | None
    department: IdNameObject | None
    recruiter_list: list[IdNameObject] | None
    jr_hiring_managers: list[IdNameObject] | None
    direct_leader_list: list[IdNameObject] | None
    start_time: str | None
    deadline: str | None
    priority: int | None
    required_degree: int | None
    max_salary: str | None
    min_salary: str | None
    address: IdNameObject | None
    description: str | None
    customized_data_list: list[JobRequirementCustomizedDataDto] | None
    job_id_list: list[str] | None
    process_type: int | None
    job_type: JobTypeInfo | None
    create_time: str | None
    creator_id: str | None
    update_time: str | None
    employment_job_id: str | None
    position_id: str | None
    completion_time: str | None
    approval_status: int | None
    def __init__(self, d=None) -> None: ...
    @staticmethod
    def builder() -> JobRequirementDtoBuilder: ...

class JobRequirementDtoBuilder:
    def __init__(self) -> None: ...
    def id(self, id: str) -> JobRequirementDtoBuilder: ...
    def short_code(self, short_code: str) -> JobRequirementDtoBuilder: ...
    def name(self, name: str) -> JobRequirementDtoBuilder: ...
    def display_progress(self, display_progress: int) -> JobRequirementDtoBuilder: ...
    def head_count(self, head_count: int) -> JobRequirementDtoBuilder: ...
    def recruitment_type(self, recruitment_type: IdNameObject) -> JobRequirementDtoBuilder: ...
    def employee_type(self, employee_type: IdNameObject) -> JobRequirementDtoBuilder: ...
    def max_level(self, max_level: IdNameObject) -> JobRequirementDtoBuilder: ...
    def min_level(self, min_level: IdNameObject) -> JobRequirementDtoBuilder: ...
    def sequence(self, sequence: IdNameObject) -> JobRequirementDtoBuilder: ...
    def category(self, category: int) -> JobRequirementDtoBuilder: ...
    def department(self, department: IdNameObject) -> JobRequirementDtoBuilder: ...
    def recruiter_list(self, recruiter_list: list[IdNameObject]) -> JobRequirementDtoBuilder: ...
    def jr_hiring_managers(self, jr_hiring_managers: list[IdNameObject]) -> JobRequirementDtoBuilder: ...
    def direct_leader_list(self, direct_leader_list: list[IdNameObject]) -> JobRequirementDtoBuilder: ...
    def start_time(self, start_time: str) -> JobRequirementDtoBuilder: ...
    def deadline(self, deadline: str) -> JobRequirementDtoBuilder: ...
    def priority(self, priority: int) -> JobRequirementDtoBuilder: ...
    def required_degree(self, required_degree: int) -> JobRequirementDtoBuilder: ...
    def max_salary(self, max_salary: str) -> JobRequirementDtoBuilder: ...
    def min_salary(self, min_salary: str) -> JobRequirementDtoBuilder: ...
    def address(self, address: IdNameObject) -> JobRequirementDtoBuilder: ...
    def description(self, description: str) -> JobRequirementDtoBuilder: ...
    def customized_data_list(self, customized_data_list: list[JobRequirementCustomizedDataDto]) -> JobRequirementDtoBuilder: ...
    def job_id_list(self, job_id_list: list[str]) -> JobRequirementDtoBuilder: ...
    def process_type(self, process_type: int) -> JobRequirementDtoBuilder: ...
    def job_type(self, job_type: JobTypeInfo) -> JobRequirementDtoBuilder: ...
    def create_time(self, create_time: str) -> JobRequirementDtoBuilder: ...
    def creator_id(self, creator_id: str) -> JobRequirementDtoBuilder: ...
    def update_time(self, update_time: str) -> JobRequirementDtoBuilder: ...
    def employment_job_id(self, employment_job_id: str) -> JobRequirementDtoBuilder: ...
    def position_id(self, position_id: str) -> JobRequirementDtoBuilder: ...
    def completion_time(self, completion_time: str) -> JobRequirementDtoBuilder: ...
    def approval_status(self, approval_status: int) -> JobRequirementDtoBuilder: ...
    def build(self) -> JobRequirementDto: ...
