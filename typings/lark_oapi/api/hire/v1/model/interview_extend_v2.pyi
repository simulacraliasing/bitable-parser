from .base_address_v2 import BaseAddressV2 as BaseAddressV2
from .code_name_object import CodeNameObject as CodeNameObject
from .id_name_object import IdNameObject as IdNameObject
from .interview_meeting_room import InterviewMeetingRoom as InterviewMeetingRoom
from .interview_record_v2 import InterviewRecordV2 as InterviewRecordV2
from lark_oapi.core.construct import init as init

class InterviewExtendV2:
    id: str | None
    begin_time: str | None
    end_time: str | None
    round: int | None
    interview_record_list: list[InterviewRecordV2] | None
    feedback_submit_time: str | None
    stage_id: str | None
    application_id: str | None
    stage: IdNameObject | None
    creator: IdNameObject | None
    create_time: str | None
    update_time: str | None
    interview_round_summary: int | None
    interview_arrangement_id: str | None
    interview_type: int | None
    talent_time_zone: CodeNameObject | None
    contact_user: IdNameObject | None
    contact_mobile: str | None
    remark: str | None
    address: BaseAddressV2 | None
    video_type: int | None
    arrangement_status: int | None
    arrangement_type: int | None
    arrangement_appointment_kind: int | None
    meeting_room_list: list[InterviewMeetingRoom] | None
    interview_round_type: IdNameObject | None
    def __init__(self, d=None) -> None: ...
    @staticmethod
    def builder() -> InterviewExtendV2Builder: ...

class InterviewExtendV2Builder:
    def __init__(self) -> None: ...
    def id(self, id: str) -> InterviewExtendV2Builder: ...
    def begin_time(self, begin_time: str) -> InterviewExtendV2Builder: ...
    def end_time(self, end_time: str) -> InterviewExtendV2Builder: ...
    def round(self, round: int) -> InterviewExtendV2Builder: ...
    def interview_record_list(self, interview_record_list: list[InterviewRecordV2]) -> InterviewExtendV2Builder: ...
    def feedback_submit_time(self, feedback_submit_time: str) -> InterviewExtendV2Builder: ...
    def stage_id(self, stage_id: str) -> InterviewExtendV2Builder: ...
    def application_id(self, application_id: str) -> InterviewExtendV2Builder: ...
    def stage(self, stage: IdNameObject) -> InterviewExtendV2Builder: ...
    def creator(self, creator: IdNameObject) -> InterviewExtendV2Builder: ...
    def create_time(self, create_time: str) -> InterviewExtendV2Builder: ...
    def update_time(self, update_time: str) -> InterviewExtendV2Builder: ...
    def interview_round_summary(self, interview_round_summary: int) -> InterviewExtendV2Builder: ...
    def interview_arrangement_id(self, interview_arrangement_id: str) -> InterviewExtendV2Builder: ...
    def interview_type(self, interview_type: int) -> InterviewExtendV2Builder: ...
    def talent_time_zone(self, talent_time_zone: CodeNameObject) -> InterviewExtendV2Builder: ...
    def contact_user(self, contact_user: IdNameObject) -> InterviewExtendV2Builder: ...
    def contact_mobile(self, contact_mobile: str) -> InterviewExtendV2Builder: ...
    def remark(self, remark: str) -> InterviewExtendV2Builder: ...
    def address(self, address: BaseAddressV2) -> InterviewExtendV2Builder: ...
    def video_type(self, video_type: int) -> InterviewExtendV2Builder: ...
    def arrangement_status(self, arrangement_status: int) -> InterviewExtendV2Builder: ...
    def arrangement_type(self, arrangement_type: int) -> InterviewExtendV2Builder: ...
    def arrangement_appointment_kind(self, arrangement_appointment_kind: int) -> InterviewExtendV2Builder: ...
    def meeting_room_list(self, meeting_room_list: list[InterviewMeetingRoom]) -> InterviewExtendV2Builder: ...
    def interview_round_type(self, interview_round_type: IdNameObject) -> InterviewExtendV2Builder: ...
    def build(self) -> InterviewExtendV2: ...
