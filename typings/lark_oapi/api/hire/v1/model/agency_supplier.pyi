from .agency_supplier_admin import AgencySupplierAdmin as AgencySupplierAdmin
from .agency_supplier_label import AgencySupplierLabel as AgencySupplierLabel
from .agency_supplier_protect_time import AgencySupplierProtectTime as AgencySupplierProtectTime
from .agency_supplier_talent_protect_time import AgencySupplierTalentProtectTime as AgencySupplierTalentProtectTime
from lark_oapi.core.construct import init as init

class AgencySupplier:
    id: str | None
    name: str | None
    label_list: list[AgencySupplierLabel] | None
    admin_list: list[AgencySupplierAdmin] | None
    agency_protect_time: AgencySupplierProtectTime | None
    cooperation_create_time: str | None
    cooperation_start_time: str | None
    cooperation_end_time: str | None
    cooperation_status: int | None
    invite_email: str | None
    supplier_area: int | None
    talent_protect_time: AgencySupplierTalentProtectTime | None
    def __init__(self, d=None) -> None: ...
    @staticmethod
    def builder() -> AgencySupplierBuilder: ...

class AgencySupplierBuilder:
    def __init__(self) -> None: ...
    def id(self, id: str) -> AgencySupplierBuilder: ...
    def name(self, name: str) -> AgencySupplierBuilder: ...
    def label_list(self, label_list: list[AgencySupplierLabel]) -> AgencySupplierBuilder: ...
    def admin_list(self, admin_list: list[AgencySupplierAdmin]) -> AgencySupplierBuilder: ...
    def agency_protect_time(self, agency_protect_time: AgencySupplierProtectTime) -> AgencySupplierBuilder: ...
    def cooperation_create_time(self, cooperation_create_time: str) -> AgencySupplierBuilder: ...
    def cooperation_start_time(self, cooperation_start_time: str) -> AgencySupplierBuilder: ...
    def cooperation_end_time(self, cooperation_end_time: str) -> AgencySupplierBuilder: ...
    def cooperation_status(self, cooperation_status: int) -> AgencySupplierBuilder: ...
    def invite_email(self, invite_email: str) -> AgencySupplierBuilder: ...
    def supplier_area(self, supplier_area: int) -> AgencySupplierBuilder: ...
    def talent_protect_time(self, talent_protect_time: AgencySupplierTalentProtectTime) -> AgencySupplierBuilder: ...
    def build(self) -> AgencySupplier: ...
