from .ability import Ability as Ability
from .i18n import I18n as I18n
from .interview_dimension_score import InterviewDimensionScore as InterviewDimensionScore
from .interview_question import InterviewQuestion as InterviewQuestion
from lark_oapi.core.construct import init as init

class InterviewDimensionAssessment:
    id: str | None
    name: I18n | None
    full_score: int | None
    content: str | None
    dimension_id: str | None
    dimension_score: InterviewDimensionScore | None
    dimension_score_list: list[InterviewDimensionScore] | None
    dimension_custom_score: int | None
    ability_list: list[Ability] | None
    question_list: list[InterviewQuestion] | None
    dimension_type: int | None
    def __init__(self, d=None) -> None: ...
    @staticmethod
    def builder() -> InterviewDimensionAssessmentBuilder: ...

class InterviewDimensionAssessmentBuilder:
    def __init__(self) -> None: ...
    def id(self, id: str) -> InterviewDimensionAssessmentBuilder: ...
    def name(self, name: I18n) -> InterviewDimensionAssessmentBuilder: ...
    def full_score(self, full_score: int) -> InterviewDimensionAssessmentBuilder: ...
    def content(self, content: str) -> InterviewDimensionAssessmentBuilder: ...
    def dimension_id(self, dimension_id: str) -> InterviewDimensionAssessmentBuilder: ...
    def dimension_score(self, dimension_score: InterviewDimensionScore) -> InterviewDimensionAssessmentBuilder: ...
    def dimension_score_list(self, dimension_score_list: list[InterviewDimensionScore]) -> InterviewDimensionAssessmentBuilder: ...
    def dimension_custom_score(self, dimension_custom_score: int) -> InterviewDimensionAssessmentBuilder: ...
    def ability_list(self, ability_list: list[Ability]) -> InterviewDimensionAssessmentBuilder: ...
    def question_list(self, question_list: list[InterviewQuestion]) -> InterviewDimensionAssessmentBuilder: ...
    def dimension_type(self, dimension_type: int) -> InterviewDimensionAssessmentBuilder: ...
    def build(self) -> InterviewDimensionAssessment: ...
