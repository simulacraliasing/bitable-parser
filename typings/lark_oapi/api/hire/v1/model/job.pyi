from .code_name_object import CodeNameObject as CodeNameObject
from .id_name_object import IdNameObject as IdNameObject
from .job_category import JobCategory as JobCategory
from .job_city import JobCity as JobCity
from .job_customized_data import JobCustomizedData as JobCustomizedData
from .job_department import JobDepartment as JobDepartment
from .job_highlight import JobHighlight as JobHighlight
from .job_level import JobLevel as JobLevel
from .job_recruitment_type import JobRecruitmentType as JobRecruitmentType
from .job_type import JobType as JobType
from .target_major_info import TargetMajorInfo as TargetMajorInfo
from lark_oapi.core.construct import init as init

class Job:
    id: str | None
    title: str | None
    description: str | None
    code: str | None
    requirement: str | None
    recruitment_type: JobRecruitmentType | None
    department: JobDepartment | None
    city: JobCity | None
    min_job_level: JobLevel | None
    max_job_level: JobLevel | None
    highlight_list: list[JobHighlight] | None
    job_category: JobCategory | None
    job_type: JobType | None
    active_status: int | None
    create_user_id: str | None
    create_time: int | None
    update_time: int | None
    process_type: int | None
    process_id: str | None
    process_name: str | None
    process_en_name: str | None
    customized_data_list: list[JobCustomizedData] | None
    job_function: IdNameObject | None
    subject: IdNameObject | None
    head_count: int | None
    experience: int | None
    expiry_time: int | None
    min_salary: int | None
    max_salary: int | None
    required_degree: int | None
    city_list: list[CodeNameObject] | None
    job_attribute: int | None
    create_timestamp: str | None
    update_timestamp: str | None
    expiry_timestamp: str | None
    target_major_list: list[TargetMajorInfo] | None
    def __init__(self, d=None) -> None: ...
    @staticmethod
    def builder() -> JobBuilder: ...

class JobBuilder:
    def __init__(self) -> None: ...
    def id(self, id: str) -> JobBuilder: ...
    def title(self, title: str) -> JobBuilder: ...
    def description(self, description: str) -> JobBuilder: ...
    def code(self, code: str) -> JobBuilder: ...
    def requirement(self, requirement: str) -> JobBuilder: ...
    def recruitment_type(self, recruitment_type: JobRecruitmentType) -> JobBuilder: ...
    def department(self, department: JobDepartment) -> JobBuilder: ...
    def city(self, city: JobCity) -> JobBuilder: ...
    def min_job_level(self, min_job_level: JobLevel) -> JobBuilder: ...
    def max_job_level(self, max_job_level: JobLevel) -> JobBuilder: ...
    def highlight_list(self, highlight_list: list[JobHighlight]) -> JobBuilder: ...
    def job_category(self, job_category: JobCategory) -> JobBuilder: ...
    def job_type(self, job_type: JobType) -> JobBuilder: ...
    def active_status(self, active_status: int) -> JobBuilder: ...
    def create_user_id(self, create_user_id: str) -> JobBuilder: ...
    def create_time(self, create_time: int) -> JobBuilder: ...
    def update_time(self, update_time: int) -> JobBuilder: ...
    def process_type(self, process_type: int) -> JobBuilder: ...
    def process_id(self, process_id: str) -> JobBuilder: ...
    def process_name(self, process_name: str) -> JobBuilder: ...
    def process_en_name(self, process_en_name: str) -> JobBuilder: ...
    def customized_data_list(self, customized_data_list: list[JobCustomizedData]) -> JobBuilder: ...
    def job_function(self, job_function: IdNameObject) -> JobBuilder: ...
    def subject(self, subject: IdNameObject) -> JobBuilder: ...
    def head_count(self, head_count: int) -> JobBuilder: ...
    def experience(self, experience: int) -> JobBuilder: ...
    def expiry_time(self, expiry_time: int) -> JobBuilder: ...
    def min_salary(self, min_salary: int) -> JobBuilder: ...
    def max_salary(self, max_salary: int) -> JobBuilder: ...
    def required_degree(self, required_degree: int) -> JobBuilder: ...
    def city_list(self, city_list: list[CodeNameObject]) -> JobBuilder: ...
    def job_attribute(self, job_attribute: int) -> JobBuilder: ...
    def create_timestamp(self, create_timestamp: str) -> JobBuilder: ...
    def update_timestamp(self, update_timestamp: str) -> JobBuilder: ...
    def expiry_timestamp(self, expiry_timestamp: str) -> JobBuilder: ...
    def target_major_list(self, target_major_list: list[TargetMajorInfo]) -> JobBuilder: ...
    def build(self) -> Job: ...
