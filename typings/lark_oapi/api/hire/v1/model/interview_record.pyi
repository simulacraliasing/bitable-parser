from .assessment_score_info import AssessmentScoreInfo as AssessmentScoreInfo
from .attachment_v2 import AttachmentV2 as AttachmentV2
from .id_name_object import IdNameObject as IdNameObject
from .interview_dimension_assessment import InterviewDimensionAssessment as InterviewDimensionAssessment
from .interview_question import InterviewQuestion as InterviewQuestion
from .interview_score import InterviewScore as InterviewScore
from lark_oapi.core.construct import init as init

class InterviewRecord:
    id: str | None
    user_id: str | None
    content: str | None
    min_job_level_id: str | None
    max_job_level_id: str | None
    commit_status: int | None
    feedback_submit_time: int | None
    conclusion: int | None
    interview_score: InterviewScore | None
    assessment_score: AssessmentScoreInfo | None
    question_list: list[InterviewQuestion] | None
    code_question_list: list[InterviewQuestion] | None
    interviewer: IdNameObject | None
    image_list: list[AttachmentV2] | None
    dimension_assessment_list: list[InterviewDimensionAssessment] | None
    def __init__(self, d=None) -> None: ...
    @staticmethod
    def builder() -> InterviewRecordBuilder: ...

class InterviewRecordBuilder:
    def __init__(self) -> None: ...
    def id(self, id: str) -> InterviewRecordBuilder: ...
    def user_id(self, user_id: str) -> InterviewRecordBuilder: ...
    def content(self, content: str) -> InterviewRecordBuilder: ...
    def min_job_level_id(self, min_job_level_id: str) -> InterviewRecordBuilder: ...
    def max_job_level_id(self, max_job_level_id: str) -> InterviewRecordBuilder: ...
    def commit_status(self, commit_status: int) -> InterviewRecordBuilder: ...
    def feedback_submit_time(self, feedback_submit_time: int) -> InterviewRecordBuilder: ...
    def conclusion(self, conclusion: int) -> InterviewRecordBuilder: ...
    def interview_score(self, interview_score: InterviewScore) -> InterviewRecordBuilder: ...
    def assessment_score(self, assessment_score: AssessmentScoreInfo) -> InterviewRecordBuilder: ...
    def question_list(self, question_list: list[InterviewQuestion]) -> InterviewRecordBuilder: ...
    def code_question_list(self, code_question_list: list[InterviewQuestion]) -> InterviewRecordBuilder: ...
    def interviewer(self, interviewer: IdNameObject) -> InterviewRecordBuilder: ...
    def image_list(self, image_list: list[AttachmentV2]) -> InterviewRecordBuilder: ...
    def dimension_assessment_list(self, dimension_assessment_list: list[InterviewDimensionAssessment]) -> InterviewRecordBuilder: ...
    def build(self) -> InterviewRecord: ...
