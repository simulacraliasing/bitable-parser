from lark_oapi.core.construct import init as init

class Employee:
    id: str | None
    application_id: str | None
    onboard_status: int | None
    conversion_status: int | None
    onboard_time: int | None
    expected_conversion_time: int | None
    actual_conversion_time: int | None
    overboard_time: int | None
    overboard_note: str | None
    onboard_city_code: str | None
    department: str | None
    leader: str | None
    sequence: str | None
    level: str | None
    employee_type: str | None
    job_requirement_id: str | None
    def __init__(self, d=None) -> None: ...
    @staticmethod
    def builder() -> EmployeeBuilder: ...

class EmployeeBuilder:
    def __init__(self) -> None: ...
    def id(self, id: str) -> EmployeeBuilder: ...
    def application_id(self, application_id: str) -> EmployeeBuilder: ...
    def onboard_status(self, onboard_status: int) -> EmployeeBuilder: ...
    def conversion_status(self, conversion_status: int) -> EmployeeBuilder: ...
    def onboard_time(self, onboard_time: int) -> EmployeeBuilder: ...
    def expected_conversion_time(self, expected_conversion_time: int) -> EmployeeBuilder: ...
    def actual_conversion_time(self, actual_conversion_time: int) -> EmployeeBuilder: ...
    def overboard_time(self, overboard_time: int) -> EmployeeBuilder: ...
    def overboard_note(self, overboard_note: str) -> EmployeeBuilder: ...
    def onboard_city_code(self, onboard_city_code: str) -> EmployeeBuilder: ...
    def department(self, department: str) -> EmployeeBuilder: ...
    def leader(self, leader: str) -> EmployeeBuilder: ...
    def sequence(self, sequence: str) -> EmployeeBuilder: ...
    def level(self, level: str) -> EmployeeBuilder: ...
    def employee_type(self, employee_type: str) -> EmployeeBuilder: ...
    def job_requirement_id(self, job_requirement_id: str) -> EmployeeBuilder: ...
    def build(self) -> Employee: ...
