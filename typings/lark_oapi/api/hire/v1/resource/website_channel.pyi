from ..model.create_website_channel_request import CreateWebsiteChannelRequest as CreateWebsiteChannelRequest
from ..model.create_website_channel_response import CreateWebsiteChannelResponse as CreateWebsiteChannelResponse
from ..model.delete_website_channel_request import DeleteWebsiteChannelRequest as DeleteWebsiteChannelRequest
from ..model.delete_website_channel_response import DeleteWebsiteChannelResponse as DeleteWebsiteChannelResponse
from ..model.list_website_channel_request import ListWebsiteChannelRequest as ListWebsiteChannelRequest
from ..model.list_website_channel_response import ListWebsiteChannelResponse as ListWebsiteChannelResponse
from ..model.update_website_channel_request import UpdateWebsiteChannelRequest as UpdateWebsiteChannelRequest
from ..model.update_website_channel_response import UpdateWebsiteChannelResponse as UpdateWebsiteChannelResponse
from lark_oapi.core import JSON as JSON
from lark_oapi.core.const import APPLICATION_JSON as APPLICATION_JSON, CONTENT_TYPE as CONTENT_TYPE, UTF_8 as UTF_8
from lark_oapi.core.http import Transport as Transport
from lark_oapi.core.model import Config as Config, RawResponse as RawResponse, RequestOption as RequestOption
from lark_oapi.core.token import verify as verify
from lark_oapi.core.utils import Files as Files
from requests_toolbelt import MultipartEncoder as MultipartEncoder

class WebsiteChannel:
    config: Config
    def __init__(self, config: Config) -> None: ...
    def create(self, request: CreateWebsiteChannelRequest, option: RequestOption | None = None) -> CreateWebsiteChannelResponse: ...
    async def acreate(self, request: CreateWebsiteChannelRequest, option: RequestOption | None = None) -> CreateWebsiteChannelResponse: ...
    def delete(self, request: DeleteWebsiteChannelRequest, option: RequestOption | None = None) -> DeleteWebsiteChannelResponse: ...
    async def adelete(self, request: DeleteWebsiteChannelRequest, option: RequestOption | None = None) -> DeleteWebsiteChannelResponse: ...
    def list(self, request: ListWebsiteChannelRequest, option: RequestOption | None = None) -> ListWebsiteChannelResponse: ...
    async def alist(self, request: ListWebsiteChannelRequest, option: RequestOption | None = None) -> ListWebsiteChannelResponse: ...
    def update(self, request: UpdateWebsiteChannelRequest, option: RequestOption | None = None) -> UpdateWebsiteChannelResponse: ...
    async def aupdate(self, request: UpdateWebsiteChannelRequest, option: RequestOption | None = None) -> UpdateWebsiteChannelResponse: ...
