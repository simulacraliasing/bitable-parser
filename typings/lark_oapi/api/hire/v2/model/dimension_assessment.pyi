from .dimension_option import DimensionOption as DimensionOption
from .i18n import I18n as I18n
from .question_assessment import QuestionAssessment as QuestionAssessment
from .recommended_job_level import RecommendedJobLevel as RecommendedJobLevel
from lark_oapi.core.construct import init as init

class DimensionAssessment:
    interview_feedback_form_dimension_id: str | None
    dimension_name: I18n | None
    dimension_type: int | None
    weight: float | None
    dimension_content: str | None
    dimension_option: DimensionOption | None
    dimension_options: list[DimensionOption] | None
    dimension_score: int | None
    recommended_job_level: RecommendedJobLevel | None
    question_assessments: list[QuestionAssessment] | None
    def __init__(self, d=None) -> None: ...
    @staticmethod
    def builder() -> DimensionAssessmentBuilder: ...

class DimensionAssessmentBuilder:
    def __init__(self) -> None: ...
    def interview_feedback_form_dimension_id(self, interview_feedback_form_dimension_id: str) -> DimensionAssessmentBuilder: ...
    def dimension_name(self, dimension_name: I18n) -> DimensionAssessmentBuilder: ...
    def dimension_type(self, dimension_type: int) -> DimensionAssessmentBuilder: ...
    def weight(self, weight: float) -> DimensionAssessmentBuilder: ...
    def dimension_content(self, dimension_content: str) -> DimensionAssessmentBuilder: ...
    def dimension_option(self, dimension_option: DimensionOption) -> DimensionAssessmentBuilder: ...
    def dimension_options(self, dimension_options: list[DimensionOption]) -> DimensionAssessmentBuilder: ...
    def dimension_score(self, dimension_score: int) -> DimensionAssessmentBuilder: ...
    def recommended_job_level(self, recommended_job_level: RecommendedJobLevel) -> DimensionAssessmentBuilder: ...
    def question_assessments(self, question_assessments: list[QuestionAssessment]) -> DimensionAssessmentBuilder: ...
    def build(self) -> DimensionAssessment: ...
