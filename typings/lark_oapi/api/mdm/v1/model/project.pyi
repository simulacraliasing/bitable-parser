from .extend_field import ExtendField as ExtendField
from .multi_language import MultiLanguage as MultiLanguage
from .project_company_dept_mapping import ProjectCompanyDeptMapping as ProjectCompanyDeptMapping
from lark_oapi.core.construct import init as init

class Project:
    project_uid: str | None
    code: str | None
    name: str | None
    type: str | None
    responsible_user_union_id: str | None
    start_day: str | None
    end_day: str | None
    parent_code: str | None
    level: int | None
    level_info: str | None
    status: int | None
    extend_info: list[ExtendField] | None
    is_all_company: bool | None
    project_company_dept_mappings: list[ProjectCompanyDeptMapping] | None
    multi_language_name: list[MultiLanguage] | None
    def __init__(self, d=None) -> None: ...
    @staticmethod
    def builder() -> ProjectBuilder: ...

class ProjectBuilder:
    def __init__(self) -> None: ...
    def project_uid(self, project_uid: str) -> ProjectBuilder: ...
    def code(self, code: str) -> ProjectBuilder: ...
    def name(self, name: str) -> ProjectBuilder: ...
    def type(self, type: str) -> ProjectBuilder: ...
    def responsible_user_union_id(self, responsible_user_union_id: str) -> ProjectBuilder: ...
    def start_day(self, start_day: str) -> ProjectBuilder: ...
    def end_day(self, end_day: str) -> ProjectBuilder: ...
    def parent_code(self, parent_code: str) -> ProjectBuilder: ...
    def level(self, level: int) -> ProjectBuilder: ...
    def level_info(self, level_info: str) -> ProjectBuilder: ...
    def status(self, status: int) -> ProjectBuilder: ...
    def extend_info(self, extend_info: list[ExtendField]) -> ProjectBuilder: ...
    def is_all_company(self, is_all_company: bool) -> ProjectBuilder: ...
    def project_company_dept_mappings(self, project_company_dept_mappings: list[ProjectCompanyDeptMapping]) -> ProjectBuilder: ...
    def multi_language_name(self, multi_language_name: list[MultiLanguage]) -> ProjectBuilder: ...
    def build(self) -> Project: ...
