from .metric_data import MetricData as MetricData
from .objective_data import ObjectiveData as ObjectiveData
from .sub_indicator import SubIndicator as SubIndicator
from .tag_text import TagText as TagText
from .user import User as User
from lark_oapi.core.construct import init as init

class ReviewDetail:
    field_id: str | None
    reviewer_user_id: User | None
    submit_time: int | None
    indicator_id: str | None
    option_id: int | None
    score: str | None
    text: str | None
    tag_based_question_id: str | None
    tag_text_item_data: list[TagText] | None
    perf_coefficient_value: str | None
    sub_indicator_data: list[SubIndicator] | None
    objective_data: list[ObjectiveData] | None
    metric_data: list[MetricData] | None
    leader_review_data_source: str | None
    multi_texts: list[str] | None
    richtext: str | None
    multi_richtexts: list[str] | None
    is_principal_review_item: bool | None
    def __init__(self, d=None) -> None: ...
    @staticmethod
    def builder() -> ReviewDetailBuilder: ...

class ReviewDetailBuilder:
    def __init__(self) -> None: ...
    def field_id(self, field_id: str) -> ReviewDetailBuilder: ...
    def reviewer_user_id(self, reviewer_user_id: User) -> ReviewDetailBuilder: ...
    def submit_time(self, submit_time: int) -> ReviewDetailBuilder: ...
    def indicator_id(self, indicator_id: str) -> ReviewDetailBuilder: ...
    def option_id(self, option_id: int) -> ReviewDetailBuilder: ...
    def score(self, score: str) -> ReviewDetailBuilder: ...
    def text(self, text: str) -> ReviewDetailBuilder: ...
    def tag_based_question_id(self, tag_based_question_id: str) -> ReviewDetailBuilder: ...
    def tag_text_item_data(self, tag_text_item_data: list[TagText]) -> ReviewDetailBuilder: ...
    def perf_coefficient_value(self, perf_coefficient_value: str) -> ReviewDetailBuilder: ...
    def sub_indicator_data(self, sub_indicator_data: list[SubIndicator]) -> ReviewDetailBuilder: ...
    def objective_data(self, objective_data: list[ObjectiveData]) -> ReviewDetailBuilder: ...
    def metric_data(self, metric_data: list[MetricData]) -> ReviewDetailBuilder: ...
    def leader_review_data_source(self, leader_review_data_source: str) -> ReviewDetailBuilder: ...
    def multi_texts(self, multi_texts: list[str]) -> ReviewDetailBuilder: ...
    def richtext(self, richtext: str) -> ReviewDetailBuilder: ...
    def multi_richtexts(self, multi_richtexts: list[str]) -> ReviewDetailBuilder: ...
    def is_principal_review_item(self, is_principal_review_item: bool) -> ReviewDetailBuilder: ...
    def build(self) -> ReviewDetail: ...
