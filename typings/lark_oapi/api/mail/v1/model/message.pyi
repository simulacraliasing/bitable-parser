from .attachment import Attachment as Attachment
from .mail_address import MailAddress as MailAddress
from lark_oapi.core.construct import init as init

class Message:
    raw: str | None
    subject: str | None
    to: list[MailAddress] | None
    cc: list[MailAddress] | None
    bcc: list[MailAddress] | None
    head_from: MailAddress | None
    body_html: str | None
    internal_date: int | None
    message_state: int | None
    smtp_message_id: str | None
    message_id: str | None
    body_plain_text: str | None
    attachments: list[Attachment] | None
    thread_id: str | None
    def __init__(self, d=None) -> None: ...
    @staticmethod
    def builder() -> MessageBuilder: ...

class MessageBuilder:
    def __init__(self) -> None: ...
    def raw(self, raw: str) -> MessageBuilder: ...
    def subject(self, subject: str) -> MessageBuilder: ...
    def to(self, to: list[MailAddress]) -> MessageBuilder: ...
    def cc(self, cc: list[MailAddress]) -> MessageBuilder: ...
    def bcc(self, bcc: list[MailAddress]) -> MessageBuilder: ...
    def head_from(self, head_from: MailAddress) -> MessageBuilder: ...
    def body_html(self, body_html: str) -> MessageBuilder: ...
    def internal_date(self, internal_date: int) -> MessageBuilder: ...
    def message_state(self, message_state: int) -> MessageBuilder: ...
    def smtp_message_id(self, smtp_message_id: str) -> MessageBuilder: ...
    def message_id(self, message_id: str) -> MessageBuilder: ...
    def body_plain_text(self, body_plain_text: str) -> MessageBuilder: ...
    def attachments(self, attachments: list[Attachment]) -> MessageBuilder: ...
    def thread_id(self, thread_id: str) -> MessageBuilder: ...
    def build(self) -> Message: ...
