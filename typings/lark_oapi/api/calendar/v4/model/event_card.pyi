from .calendar_understand_scenario_context import CalendarUnderstandScenarioContext as CalendarUnderstandScenarioContext
from lark_oapi.core.construct import init as init

class EventCard:
    summary: str | None
    start_time: str | None
    end_time: str | None
    start_timezone: str | None
    participant_ids: str | None
    recurrence_rule: str | None
    meeting_room_ids: str | None
    duration: str | None
    need_meeting_notes: str | None
    scenario_context_schema_version: str | None
    scenario_context: CalendarUnderstandScenarioContext | None
    event_id: str | None
    def __init__(self, d=None) -> None: ...
    @staticmethod
    def builder() -> EventCardBuilder: ...

class EventCardBuilder:
    def __init__(self) -> None: ...
    def summary(self, summary: str) -> EventCardBuilder: ...
    def start_time(self, start_time: str) -> EventCardBuilder: ...
    def end_time(self, end_time: str) -> EventCardBuilder: ...
    def start_timezone(self, start_timezone: str) -> EventCardBuilder: ...
    def participant_ids(self, participant_ids: str) -> EventCardBuilder: ...
    def recurrence_rule(self, recurrence_rule: str) -> EventCardBuilder: ...
    def meeting_room_ids(self, meeting_room_ids: str) -> EventCardBuilder: ...
    def duration(self, duration: str) -> EventCardBuilder: ...
    def need_meeting_notes(self, need_meeting_notes: str) -> EventCardBuilder: ...
    def scenario_context_schema_version(self, scenario_context_schema_version: str) -> EventCardBuilder: ...
    def scenario_context(self, scenario_context: CalendarUnderstandScenarioContext) -> EventCardBuilder: ...
    def event_id(self, event_id: str) -> EventCardBuilder: ...
    def build(self) -> EventCard: ...
