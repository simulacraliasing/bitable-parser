from .user_id import UserId as UserId
from lark_oapi.core.construct import init as init

class DeviceApplyRecord:
    apply_id: int | None
    device_terminal_type: str | None
    model: str | None
    serial_number: str | None
    uuid: str | None
    mac_address: str | None
    imei: str | None
    android_id: str | None
    google_aid: str | None
    idfa: str | None
    idfv: str | None
    apply_status: str | None
    operator: UserId | None
    apply_time: str | None
    disk_serial_number: str | None
    device_ownership: str | None
    device_system: str | None
    device_name: str | None
    device_record_id: int | None
    aaid: str | None
    def __init__(self, d=None) -> None: ...
    @staticmethod
    def builder() -> DeviceApplyRecordBuilder: ...

class DeviceApplyRecordBuilder:
    def __init__(self) -> None: ...
    def apply_id(self, apply_id: int) -> DeviceApplyRecordBuilder: ...
    def device_terminal_type(self, device_terminal_type: str) -> DeviceApplyRecordBuilder: ...
    def model(self, model: str) -> DeviceApplyRecordBuilder: ...
    def serial_number(self, serial_number: str) -> DeviceApplyRecordBuilder: ...
    def uuid(self, uuid: str) -> DeviceApplyRecordBuilder: ...
    def mac_address(self, mac_address: str) -> DeviceApplyRecordBuilder: ...
    def imei(self, imei: str) -> DeviceApplyRecordBuilder: ...
    def android_id(self, android_id: str) -> DeviceApplyRecordBuilder: ...
    def google_aid(self, google_aid: str) -> DeviceApplyRecordBuilder: ...
    def idfa(self, idfa: str) -> DeviceApplyRecordBuilder: ...
    def idfv(self, idfv: str) -> DeviceApplyRecordBuilder: ...
    def apply_status(self, apply_status: str) -> DeviceApplyRecordBuilder: ...
    def operator(self, operator: UserId) -> DeviceApplyRecordBuilder: ...
    def apply_time(self, apply_time: str) -> DeviceApplyRecordBuilder: ...
    def disk_serial_number(self, disk_serial_number: str) -> DeviceApplyRecordBuilder: ...
    def device_ownership(self, device_ownership: str) -> DeviceApplyRecordBuilder: ...
    def device_system(self, device_system: str) -> DeviceApplyRecordBuilder: ...
    def device_name(self, device_name: str) -> DeviceApplyRecordBuilder: ...
    def device_record_id(self, device_record_id: int) -> DeviceApplyRecordBuilder: ...
    def aaid(self, aaid: str) -> DeviceApplyRecordBuilder: ...
    def build(self) -> DeviceApplyRecord: ...
