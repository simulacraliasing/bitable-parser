from .composite_shape import CompositeShape as CompositeShape
from .connector import Connector as Connector
from .image import Image as Image
from .mind_map import MindMap as MindMap
from .section import Section as Section
from .style import Style as Style
from .table import Table as Table
from .text import Text as Text
from lark_oapi.core.construct import init as init

class WhiteboardNode:
    id: str | None
    type: str | None
    parent_id: str | None
    children: list[str] | None
    x: float | None
    y: float | None
    angle: float | None
    width: float | None
    height: float | None
    text: Text | None
    style: Style | None
    image: Image | None
    composite_shape: CompositeShape | None
    connector: Connector | None
    section: Section | None
    table: Table | None
    mind_map: MindMap | None
    def __init__(self, d=None) -> None: ...
    @staticmethod
    def builder() -> WhiteboardNodeBuilder: ...

class WhiteboardNodeBuilder:
    def __init__(self) -> None: ...
    def id(self, id: str) -> WhiteboardNodeBuilder: ...
    def type(self, type: str) -> WhiteboardNodeBuilder: ...
    def parent_id(self, parent_id: str) -> WhiteboardNodeBuilder: ...
    def children(self, children: list[str]) -> WhiteboardNodeBuilder: ...
    def x(self, x: float) -> WhiteboardNodeBuilder: ...
    def y(self, y: float) -> WhiteboardNodeBuilder: ...
    def angle(self, angle: float) -> WhiteboardNodeBuilder: ...
    def width(self, width: float) -> WhiteboardNodeBuilder: ...
    def height(self, height: float) -> WhiteboardNodeBuilder: ...
    def text(self, text: Text) -> WhiteboardNodeBuilder: ...
    def style(self, style: Style) -> WhiteboardNodeBuilder: ...
    def image(self, image: Image) -> WhiteboardNodeBuilder: ...
    def composite_shape(self, composite_shape: CompositeShape) -> WhiteboardNodeBuilder: ...
    def connector(self, connector: Connector) -> WhiteboardNodeBuilder: ...
    def section(self, section: Section) -> WhiteboardNodeBuilder: ...
    def table(self, table: Table) -> WhiteboardNodeBuilder: ...
    def mind_map(self, mind_map: MindMap) -> WhiteboardNodeBuilder: ...
    def build(self) -> WhiteboardNode: ...
