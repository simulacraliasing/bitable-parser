from .app_roles_info import AppRolesInfo as AppRolesInfo
from .client_isv_tenant import ClientIsvTenant as ClientIsvTenant
from .i18n import I18n as I18n
from lark_oapi.core.construct import init as init

class App:
    name: list[I18n] | None
    namespace: str | None
    created_at: int | None
    creator: int | None
    owner: int | None
    status: str | None
    app_roles_info: AppRolesInfo | None
    icon: str | None
    description: list[I18n] | None
    type: str | None
    enable_status: str | None
    release_status: str | None
    service_status: str | None
    service_unavailable_reason: str | None
    feature_set: str | None
    charge_mode: str | None
    isv_tenant: ClientIsvTenant | None
    def __init__(self, d=None) -> None: ...
    @staticmethod
    def builder() -> AppBuilder: ...

class AppBuilder:
    def __init__(self) -> None: ...
    def name(self, name: list[I18n]) -> AppBuilder: ...
    def namespace(self, namespace: str) -> AppBuilder: ...
    def created_at(self, created_at: int) -> AppBuilder: ...
    def creator(self, creator: int) -> AppBuilder: ...
    def owner(self, owner: int) -> AppBuilder: ...
    def status(self, status: str) -> AppBuilder: ...
    def app_roles_info(self, app_roles_info: AppRolesInfo) -> AppBuilder: ...
    def icon(self, icon: str) -> AppBuilder: ...
    def description(self, description: list[I18n]) -> AppBuilder: ...
    def type(self, type: str) -> AppBuilder: ...
    def enable_status(self, enable_status: str) -> AppBuilder: ...
    def release_status(self, release_status: str) -> AppBuilder: ...
    def service_status(self, service_status: str) -> AppBuilder: ...
    def service_unavailable_reason(self, service_unavailable_reason: str) -> AppBuilder: ...
    def feature_set(self, feature_set: str) -> AppBuilder: ...
    def charge_mode(self, charge_mode: str) -> AppBuilder: ...
    def isv_tenant(self, isv_tenant: ClientIsvTenant) -> AppBuilder: ...
    def build(self) -> App: ...
