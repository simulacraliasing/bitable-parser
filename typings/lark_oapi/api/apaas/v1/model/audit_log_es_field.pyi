from .lookup_with_avatar import LookupWithAvatar as LookupWithAvatar
from lark_oapi.core.construct import init as init

class AuditLogEsField:
    log_id: str | None
    op_time: str | None
    log_type: str | None
    operator: LookupWithAvatar | None
    outsider: bool | None
    login_type: str | None
    lark_tenant_id: str | None
    apaas_tenant_id: str | None
    user_geo: str | None
    client_ip: str | None
    ip_loc: str | None
    ip_provider: str | None
    referer: str | None
    origin: str | None
    api_path: str | None
    full_path: str | None
    user_agent: str | None
    device_id: str | None
    web_device_id: str | None
    terminal_type: str | None
    os_type: str | None
    os_version: str | None
    module: str | None
    data_object: str | None
    audit_scope: str | None
    tenant_id: str | None
    namespace: str | None
    env_type: str | None
    op_type: str | None
    op_detail: dict[str, str] | None
    op_source: str | None
    status: str | None
    failed_reason_i18n: dict[str, str] | None
    data_changes: list[str] | None
    app_name: dict[str, str] | None
    keyword_field_app_version: str | None
    keyword_field_functional_sub_module: str | None
    def __init__(self, d=None) -> None: ...
    @staticmethod
    def builder() -> AuditLogEsFieldBuilder: ...

class AuditLogEsFieldBuilder:
    def __init__(self) -> None: ...
    def log_id(self, log_id: str) -> AuditLogEsFieldBuilder: ...
    def op_time(self, op_time: str) -> AuditLogEsFieldBuilder: ...
    def log_type(self, log_type: str) -> AuditLogEsFieldBuilder: ...
    def operator(self, operator: LookupWithAvatar) -> AuditLogEsFieldBuilder: ...
    def outsider(self, outsider: bool) -> AuditLogEsFieldBuilder: ...
    def login_type(self, login_type: str) -> AuditLogEsFieldBuilder: ...
    def lark_tenant_id(self, lark_tenant_id: str) -> AuditLogEsFieldBuilder: ...
    def apaas_tenant_id(self, apaas_tenant_id: str) -> AuditLogEsFieldBuilder: ...
    def user_geo(self, user_geo: str) -> AuditLogEsFieldBuilder: ...
    def client_ip(self, client_ip: str) -> AuditLogEsFieldBuilder: ...
    def ip_loc(self, ip_loc: str) -> AuditLogEsFieldBuilder: ...
    def ip_provider(self, ip_provider: str) -> AuditLogEsFieldBuilder: ...
    def referer(self, referer: str) -> AuditLogEsFieldBuilder: ...
    def origin(self, origin: str) -> AuditLogEsFieldBuilder: ...
    def api_path(self, api_path: str) -> AuditLogEsFieldBuilder: ...
    def full_path(self, full_path: str) -> AuditLogEsFieldBuilder: ...
    def user_agent(self, user_agent: str) -> AuditLogEsFieldBuilder: ...
    def device_id(self, device_id: str) -> AuditLogEsFieldBuilder: ...
    def web_device_id(self, web_device_id: str) -> AuditLogEsFieldBuilder: ...
    def terminal_type(self, terminal_type: str) -> AuditLogEsFieldBuilder: ...
    def os_type(self, os_type: str) -> AuditLogEsFieldBuilder: ...
    def os_version(self, os_version: str) -> AuditLogEsFieldBuilder: ...
    def module(self, module: str) -> AuditLogEsFieldBuilder: ...
    def data_object(self, data_object: str) -> AuditLogEsFieldBuilder: ...
    def audit_scope(self, audit_scope: str) -> AuditLogEsFieldBuilder: ...
    def tenant_id(self, tenant_id: str) -> AuditLogEsFieldBuilder: ...
    def namespace(self, namespace: str) -> AuditLogEsFieldBuilder: ...
    def env_type(self, env_type: str) -> AuditLogEsFieldBuilder: ...
    def op_type(self, op_type: str) -> AuditLogEsFieldBuilder: ...
    def op_detail(self, op_detail: dict[str, str]) -> AuditLogEsFieldBuilder: ...
    def op_source(self, op_source: str) -> AuditLogEsFieldBuilder: ...
    def status(self, status: str) -> AuditLogEsFieldBuilder: ...
    def failed_reason_i18n(self, failed_reason_i18n: dict[str, str]) -> AuditLogEsFieldBuilder: ...
    def data_changes(self, data_changes: list[str]) -> AuditLogEsFieldBuilder: ...
    def app_name(self, app_name: dict[str, str]) -> AuditLogEsFieldBuilder: ...
    def keyword_field_app_version(self, keyword_field_app_version: str) -> AuditLogEsFieldBuilder: ...
    def keyword_field_functional_sub_module(self, keyword_field_functional_sub_module: str) -> AuditLogEsFieldBuilder: ...
    def build(self) -> AuditLogEsField: ...
