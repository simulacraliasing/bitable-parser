from .criterion import Criterion as Criterion
from .record_group_by_item import RecordGroupByItem as RecordGroupByItem
from .sort import Sort as Sort
from lark_oapi.core.construct import init as init

class BatchQueryApplicationObjectRecordRequestBody:
    select: list[str] | None
    filter: Criterion | None
    order_by: list[Sort] | None
    group_by: list[RecordGroupByItem] | None
    page_token: str | None
    use_page_token: bool | None
    page_size: int | None
    offset: int | None
    need_total_count: bool | None
    def __init__(self, d=None) -> None: ...
    @staticmethod
    def builder() -> BatchQueryApplicationObjectRecordRequestBodyBuilder: ...

class BatchQueryApplicationObjectRecordRequestBodyBuilder:
    def __init__(self) -> None: ...
    def select(self, select: list[str]) -> BatchQueryApplicationObjectRecordRequestBodyBuilder: ...
    def filter(self, filter: Criterion) -> BatchQueryApplicationObjectRecordRequestBodyBuilder: ...
    def order_by(self, order_by: list[Sort]) -> BatchQueryApplicationObjectRecordRequestBodyBuilder: ...
    def group_by(self, group_by: list[RecordGroupByItem]) -> BatchQueryApplicationObjectRecordRequestBodyBuilder: ...
    def page_token(self, page_token: str) -> BatchQueryApplicationObjectRecordRequestBodyBuilder: ...
    def use_page_token(self, use_page_token: bool) -> BatchQueryApplicationObjectRecordRequestBodyBuilder: ...
    def page_size(self, page_size: int) -> BatchQueryApplicationObjectRecordRequestBodyBuilder: ...
    def offset(self, offset: int) -> BatchQueryApplicationObjectRecordRequestBodyBuilder: ...
    def need_total_count(self, need_total_count: bool) -> BatchQueryApplicationObjectRecordRequestBodyBuilder: ...
    def build(self) -> BatchQueryApplicationObjectRecordRequestBody: ...
