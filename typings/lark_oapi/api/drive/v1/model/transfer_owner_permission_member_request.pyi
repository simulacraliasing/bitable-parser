from .owner import Owner as Owner
from lark_oapi.core.enum import AccessTokenType as AccessTokenType, HttpMethod as HttpMethod
from lark_oapi.core.model import BaseRequest as BaseRequest

class TransferOwnerPermissionMemberRequest(BaseRequest):
    type: str | None
    need_notification: bool | None
    remove_old_owner: bool | None
    stay_put: bool | None
    old_owner_perm: str | None
    token: str | None
    request_body: Owner | None
    def __init__(self) -> None: ...
    @staticmethod
    def builder() -> TransferOwnerPermissionMemberRequestBuilder: ...

class TransferOwnerPermissionMemberRequestBuilder:
    def __init__(self) -> None: ...
    def type(self, type: str) -> TransferOwnerPermissionMemberRequestBuilder: ...
    def need_notification(self, need_notification: bool) -> TransferOwnerPermissionMemberRequestBuilder: ...
    def remove_old_owner(self, remove_old_owner: bool) -> TransferOwnerPermissionMemberRequestBuilder: ...
    def stay_put(self, stay_put: bool) -> TransferOwnerPermissionMemberRequestBuilder: ...
    def old_owner_perm(self, old_owner_perm: str) -> TransferOwnerPermissionMemberRequestBuilder: ...
    def token(self, token: str) -> TransferOwnerPermissionMemberRequestBuilder: ...
    def request_body(self, request_body: Owner) -> TransferOwnerPermissionMemberRequestBuilder: ...
    def build(self) -> TransferOwnerPermissionMemberRequest: ...
