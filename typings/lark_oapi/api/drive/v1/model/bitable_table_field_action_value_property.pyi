from .bitable_table_field_action_value_property_auto_serial import BitableTableFieldActionValuePropertyAutoSerial as BitableTableFieldActionValuePropertyAutoSerial
from .bitable_table_field_action_value_property_option import BitableTableFieldActionValuePropertyOption as BitableTableFieldActionValuePropertyOption
from lark_oapi.core.construct import init as init

class BitableTableFieldActionValueProperty:
    formatter: str | None
    date_formatter: str | None
    auto_fill: bool | None
    multiple: bool | None
    table_id: str | None
    table_name: str | None
    back_field_name: str | None
    input_type: str | None
    back_field_id: str | None
    auto_serial: BitableTableFieldActionValuePropertyAutoSerial | None
    options: list[BitableTableFieldActionValuePropertyOption] | None
    formula_expression: str | None
    def __init__(self, d=None) -> None: ...
    @staticmethod
    def builder() -> BitableTableFieldActionValuePropertyBuilder: ...

class BitableTableFieldActionValuePropertyBuilder:
    def __init__(self) -> None: ...
    def formatter(self, formatter: str) -> BitableTableFieldActionValuePropertyBuilder: ...
    def date_formatter(self, date_formatter: str) -> BitableTableFieldActionValuePropertyBuilder: ...
    def auto_fill(self, auto_fill: bool) -> BitableTableFieldActionValuePropertyBuilder: ...
    def multiple(self, multiple: bool) -> BitableTableFieldActionValuePropertyBuilder: ...
    def table_id(self, table_id: str) -> BitableTableFieldActionValuePropertyBuilder: ...
    def table_name(self, table_name: str) -> BitableTableFieldActionValuePropertyBuilder: ...
    def back_field_name(self, back_field_name: str) -> BitableTableFieldActionValuePropertyBuilder: ...
    def input_type(self, input_type: str) -> BitableTableFieldActionValuePropertyBuilder: ...
    def back_field_id(self, back_field_id: str) -> BitableTableFieldActionValuePropertyBuilder: ...
    def auto_serial(self, auto_serial: BitableTableFieldActionValuePropertyAutoSerial) -> BitableTableFieldActionValuePropertyBuilder: ...
    def options(self, options: list[BitableTableFieldActionValuePropertyOption]) -> BitableTableFieldActionValuePropertyBuilder: ...
    def formula_expression(self, formula_expression: str) -> BitableTableFieldActionValuePropertyBuilder: ...
    def build(self) -> BitableTableFieldActionValueProperty: ...
