from .attachment import Attachment as Attachment
from .custom_complete import CustomComplete as CustomComplete
from .custom_field_value import CustomFieldValue as CustomFieldValue
from .due import Due as Due
from .member import Member as Member
from .origin import Origin as Origin
from .reminder import Reminder as Reminder
from .start import Start as Start
from .task_assignee import TaskAssignee as TaskAssignee
from .task_dependency import TaskDependency as TaskDependency
from .task_in_tasklist_info import TaskInTasklistInfo as TaskInTasklistInfo
from lark_oapi.core.construct import init as init

class Task:
    guid: str | None
    summary: str | None
    description: str | None
    due: Due | None
    reminders: list[Reminder] | None
    creator: Member | None
    members: list[Member] | None
    completed_at: int | None
    attachments: list[Attachment] | None
    origin: Origin | None
    extra: str | None
    tasklists: list[TaskInTasklistInfo] | None
    repeat_rule: str | None
    parent_task_guid: str | None
    mode: int | None
    source: int | None
    custom_complete: CustomComplete | None
    task_id: str | None
    created_at: int | None
    updated_at: int | None
    status: str | None
    url: str | None
    start: Start | None
    subtask_count: int | None
    is_milestone: bool | None
    custom_fields: list[CustomFieldValue] | None
    dependencies: list[TaskDependency] | None
    assignee_related: list[TaskAssignee] | None
    positive_reminders: list[Reminder] | None
    def __init__(self, d=None) -> None: ...
    @staticmethod
    def builder() -> TaskBuilder: ...

class TaskBuilder:
    def __init__(self) -> None: ...
    def guid(self, guid: str) -> TaskBuilder: ...
    def summary(self, summary: str) -> TaskBuilder: ...
    def description(self, description: str) -> TaskBuilder: ...
    def due(self, due: Due) -> TaskBuilder: ...
    def reminders(self, reminders: list[Reminder]) -> TaskBuilder: ...
    def creator(self, creator: Member) -> TaskBuilder: ...
    def members(self, members: list[Member]) -> TaskBuilder: ...
    def completed_at(self, completed_at: int) -> TaskBuilder: ...
    def attachments(self, attachments: list[Attachment]) -> TaskBuilder: ...
    def origin(self, origin: Origin) -> TaskBuilder: ...
    def extra(self, extra: str) -> TaskBuilder: ...
    def tasklists(self, tasklists: list[TaskInTasklistInfo]) -> TaskBuilder: ...
    def repeat_rule(self, repeat_rule: str) -> TaskBuilder: ...
    def parent_task_guid(self, parent_task_guid: str) -> TaskBuilder: ...
    def mode(self, mode: int) -> TaskBuilder: ...
    def source(self, source: int) -> TaskBuilder: ...
    def custom_complete(self, custom_complete: CustomComplete) -> TaskBuilder: ...
    def task_id(self, task_id: str) -> TaskBuilder: ...
    def created_at(self, created_at: int) -> TaskBuilder: ...
    def updated_at(self, updated_at: int) -> TaskBuilder: ...
    def status(self, status: str) -> TaskBuilder: ...
    def url(self, url: str) -> TaskBuilder: ...
    def start(self, start: Start) -> TaskBuilder: ...
    def subtask_count(self, subtask_count: int) -> TaskBuilder: ...
    def is_milestone(self, is_milestone: bool) -> TaskBuilder: ...
    def custom_fields(self, custom_fields: list[CustomFieldValue]) -> TaskBuilder: ...
    def dependencies(self, dependencies: list[TaskDependency]) -> TaskBuilder: ...
    def assignee_related(self, assignee_related: list[TaskAssignee]) -> TaskBuilder: ...
    def positive_reminders(self, positive_reminders: list[Reminder]) -> TaskBuilder: ...
    def build(self) -> Task: ...
