from ..model.create_comment_request import CreateCommentRequest as CreateCommentRequest
from ..model.create_comment_response import CreateCommentResponse as CreateCommentResponse
from ..model.delete_comment_request import DeleteCommentRequest as DeleteCommentRequest
from ..model.delete_comment_response import DeleteCommentResponse as DeleteCommentResponse
from ..model.get_comment_request import GetCommentRequest as GetCommentRequest
from ..model.get_comment_response import GetCommentResponse as GetCommentResponse
from ..model.list_comment_request import ListCommentRequest as ListCommentRequest
from ..model.list_comment_response import ListCommentResponse as ListCommentResponse
from ..model.patch_comment_request import PatchCommentRequest as PatchCommentRequest
from ..model.patch_comment_response import PatchCommentResponse as PatchCommentResponse
from lark_oapi.core import JSON as JSON
from lark_oapi.core.const import APPLICATION_JSON as APPLICATION_JSON, CONTENT_TYPE as CONTENT_TYPE, UTF_8 as UTF_8
from lark_oapi.core.http import Transport as Transport
from lark_oapi.core.model import Config as Config, RawResponse as RawResponse, RequestOption as RequestOption
from lark_oapi.core.token import verify as verify
from lark_oapi.core.utils import Files as Files
from requests_toolbelt import MultipartEncoder as MultipartEncoder

class Comment:
    config: Config
    def __init__(self, config: Config) -> None: ...
    def create(self, request: CreateCommentRequest, option: RequestOption | None = None) -> CreateCommentResponse: ...
    async def acreate(self, request: CreateCommentRequest, option: RequestOption | None = None) -> CreateCommentResponse: ...
    def delete(self, request: DeleteCommentRequest, option: RequestOption | None = None) -> DeleteCommentResponse: ...
    async def adelete(self, request: DeleteCommentRequest, option: RequestOption | None = None) -> DeleteCommentResponse: ...
    def get(self, request: GetCommentRequest, option: RequestOption | None = None) -> GetCommentResponse: ...
    async def aget(self, request: GetCommentRequest, option: RequestOption | None = None) -> GetCommentResponse: ...
    def list(self, request: ListCommentRequest, option: RequestOption | None = None) -> ListCommentResponse: ...
    async def alist(self, request: ListCommentRequest, option: RequestOption | None = None) -> ListCommentResponse: ...
    def patch(self, request: PatchCommentRequest, option: RequestOption | None = None) -> PatchCommentResponse: ...
    async def apatch(self, request: PatchCommentRequest, option: RequestOption | None = None) -> PatchCommentResponse: ...
