from .collaborator import Collaborator as Collaborator
from .due import Due as Due
from .follower import Follower as Follower
from .origin import Origin as Origin
from lark_oapi.core.construct import init as init

class Task:
    id: str | None
    summary: str | None
    description: str | None
    complete_time: int | None
    creator_id: str | None
    extra: str | None
    create_time: int | None
    update_time: int | None
    due: Due | None
    origin: Origin | None
    can_edit: bool | None
    custom: str | None
    source: int | None
    followers: list[Follower] | None
    collaborators: list[Collaborator] | None
    collaborator_ids: list[str] | None
    follower_ids: list[str] | None
    repeat_rule: str | None
    rich_summary: str | None
    rich_description: str | None
    def __init__(self, d=None) -> None: ...
    @staticmethod
    def builder() -> TaskBuilder: ...

class TaskBuilder:
    def __init__(self) -> None: ...
    def id(self, id: str) -> TaskBuilder: ...
    def summary(self, summary: str) -> TaskBuilder: ...
    def description(self, description: str) -> TaskBuilder: ...
    def complete_time(self, complete_time: int) -> TaskBuilder: ...
    def creator_id(self, creator_id: str) -> TaskBuilder: ...
    def extra(self, extra: str) -> TaskBuilder: ...
    def create_time(self, create_time: int) -> TaskBuilder: ...
    def update_time(self, update_time: int) -> TaskBuilder: ...
    def due(self, due: Due) -> TaskBuilder: ...
    def origin(self, origin: Origin) -> TaskBuilder: ...
    def can_edit(self, can_edit: bool) -> TaskBuilder: ...
    def custom(self, custom: str) -> TaskBuilder: ...
    def source(self, source: int) -> TaskBuilder: ...
    def followers(self, followers: list[Follower]) -> TaskBuilder: ...
    def collaborators(self, collaborators: list[Collaborator]) -> TaskBuilder: ...
    def collaborator_ids(self, collaborator_ids: list[str]) -> TaskBuilder: ...
    def follower_ids(self, follower_ids: list[str]) -> TaskBuilder: ...
    def repeat_rule(self, repeat_rule: str) -> TaskBuilder: ...
    def rich_summary(self, rich_summary: str) -> TaskBuilder: ...
    def rich_description(self, rich_description: str) -> TaskBuilder: ...
    def build(self) -> Task: ...
