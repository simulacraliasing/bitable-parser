from .model.p2_task_task_comment_updated_v1 import P2TaskTaskCommentUpdatedV1 as P2TaskTaskCommentUpdatedV1
from .model.p2_task_task_update_tenant_v1 import P2TaskTaskUpdateTenantV1 as P2TaskTaskUpdateTenantV1
from .model.p2_task_task_updated_v1 import P2TaskTaskUpdatedV1 as P2TaskTaskUpdatedV1
from _typeshed import Incomplete
from lark_oapi.event.processor import IEventProcessor as IEventProcessor
from typing import Callable

class P2TaskTaskUpdateTenantV1Processor(IEventProcessor[P2TaskTaskUpdateTenantV1]):
    f: Incomplete
    def __init__(self, f: Callable[[P2TaskTaskUpdateTenantV1], None]) -> None: ...
    def type(self) -> type[P2TaskTaskUpdateTenantV1]: ...
    def do(self, data: P2TaskTaskUpdateTenantV1) -> None: ...

class P2TaskTaskUpdatedV1Processor(IEventProcessor[P2TaskTaskUpdatedV1]):
    f: Incomplete
    def __init__(self, f: Callable[[P2TaskTaskUpdatedV1], None]) -> None: ...
    def type(self) -> type[P2TaskTaskUpdatedV1]: ...
    def do(self, data: P2TaskTaskUpdatedV1) -> None: ...

class P2TaskTaskCommentUpdatedV1Processor(IEventProcessor[P2TaskTaskCommentUpdatedV1]):
    f: Incomplete
    def __init__(self, f: Callable[[P2TaskTaskCommentUpdatedV1], None]) -> None: ...
    def type(self) -> type[P2TaskTaskCommentUpdatedV1]: ...
    def do(self, data: P2TaskTaskCommentUpdatedV1) -> None: ...
