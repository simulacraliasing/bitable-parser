from ..model.batch_delete_collaborator_task_request import BatchDeleteCollaboratorTaskRequest as BatchDeleteCollaboratorTaskRequest
from ..model.batch_delete_collaborator_task_response import BatchDeleteCollaboratorTaskResponse as BatchDeleteCollaboratorTaskResponse
from ..model.batch_delete_follower_task_request import BatchDeleteFollowerTaskRequest as BatchDeleteFollowerTaskRequest
from ..model.batch_delete_follower_task_response import BatchDeleteFollowerTaskResponse as BatchDeleteFollowerTaskResponse
from ..model.complete_task_request import CompleteTaskRequest as CompleteTaskRequest
from ..model.complete_task_response import CompleteTaskResponse as CompleteTaskResponse
from ..model.create_task_request import CreateTaskRequest as CreateTaskRequest
from ..model.create_task_response import CreateTaskResponse as CreateTaskResponse
from ..model.delete_task_request import DeleteTaskRequest as DeleteTaskRequest
from ..model.delete_task_response import DeleteTaskResponse as DeleteTaskResponse
from ..model.get_task_request import GetTaskRequest as GetTaskRequest
from ..model.get_task_response import GetTaskResponse as GetTaskResponse
from ..model.list_task_request import ListTaskRequest as ListTaskRequest
from ..model.list_task_response import ListTaskResponse as ListTaskResponse
from ..model.patch_task_request import PatchTaskRequest as PatchTaskRequest
from ..model.patch_task_response import PatchTaskResponse as PatchTaskResponse
from ..model.uncomplete_task_request import UncompleteTaskRequest as UncompleteTaskRequest
from ..model.uncomplete_task_response import UncompleteTaskResponse as UncompleteTaskResponse
from lark_oapi.core import JSON as JSON
from lark_oapi.core.const import APPLICATION_JSON as APPLICATION_JSON, CONTENT_TYPE as CONTENT_TYPE, UTF_8 as UTF_8
from lark_oapi.core.http import Transport as Transport
from lark_oapi.core.model import Config as Config, RawResponse as RawResponse, RequestOption as RequestOption
from lark_oapi.core.token import verify as verify
from lark_oapi.core.utils import Files as Files
from requests_toolbelt import MultipartEncoder as MultipartEncoder

class Task:
    config: Config
    def __init__(self, config: Config) -> None: ...
    def batch_delete_collaborator(self, request: BatchDeleteCollaboratorTaskRequest, option: RequestOption | None = None) -> BatchDeleteCollaboratorTaskResponse: ...
    async def abatch_delete_collaborator(self, request: BatchDeleteCollaboratorTaskRequest, option: RequestOption | None = None) -> BatchDeleteCollaboratorTaskResponse: ...
    def batch_delete_follower(self, request: BatchDeleteFollowerTaskRequest, option: RequestOption | None = None) -> BatchDeleteFollowerTaskResponse: ...
    async def abatch_delete_follower(self, request: BatchDeleteFollowerTaskRequest, option: RequestOption | None = None) -> BatchDeleteFollowerTaskResponse: ...
    def complete(self, request: CompleteTaskRequest, option: RequestOption | None = None) -> CompleteTaskResponse: ...
    async def acomplete(self, request: CompleteTaskRequest, option: RequestOption | None = None) -> CompleteTaskResponse: ...
    def create(self, request: CreateTaskRequest, option: RequestOption | None = None) -> CreateTaskResponse: ...
    async def acreate(self, request: CreateTaskRequest, option: RequestOption | None = None) -> CreateTaskResponse: ...
    def delete(self, request: DeleteTaskRequest, option: RequestOption | None = None) -> DeleteTaskResponse: ...
    async def adelete(self, request: DeleteTaskRequest, option: RequestOption | None = None) -> DeleteTaskResponse: ...
    def get(self, request: GetTaskRequest, option: RequestOption | None = None) -> GetTaskResponse: ...
    async def aget(self, request: GetTaskRequest, option: RequestOption | None = None) -> GetTaskResponse: ...
    def list(self, request: ListTaskRequest, option: RequestOption | None = None) -> ListTaskResponse: ...
    async def alist(self, request: ListTaskRequest, option: RequestOption | None = None) -> ListTaskResponse: ...
    def patch(self, request: PatchTaskRequest, option: RequestOption | None = None) -> PatchTaskResponse: ...
    async def apatch(self, request: PatchTaskRequest, option: RequestOption | None = None) -> PatchTaskResponse: ...
    def uncomplete(self, request: UncompleteTaskRequest, option: RequestOption | None = None) -> UncompleteTaskResponse: ...
    async def auncomplete(self, request: UncompleteTaskRequest, option: RequestOption | None = None) -> UncompleteTaskResponse: ...
