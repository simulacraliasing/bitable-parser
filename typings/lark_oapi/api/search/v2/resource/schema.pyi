from ..model.create_schema_request import CreateSchemaRequest as CreateSchemaRequest
from ..model.create_schema_response import CreateSchemaResponse as CreateSchemaResponse
from ..model.delete_schema_request import DeleteSchemaRequest as DeleteSchemaRequest
from ..model.delete_schema_response import DeleteSchemaResponse as DeleteSchemaResponse
from ..model.get_schema_request import GetSchemaRequest as GetSchemaRequest
from ..model.get_schema_response import GetSchemaResponse as GetSchemaResponse
from ..model.patch_schema_request import PatchSchemaRequest as PatchSchemaRequest
from ..model.patch_schema_response import PatchSchemaResponse as PatchSchemaResponse
from lark_oapi.core import JSON as JSON
from lark_oapi.core.const import APPLICATION_JSON as APPLICATION_JSON, CONTENT_TYPE as CONTENT_TYPE, UTF_8 as UTF_8
from lark_oapi.core.http import Transport as Transport
from lark_oapi.core.model import Config as Config, RawResponse as RawResponse, RequestOption as RequestOption
from lark_oapi.core.token import verify as verify
from lark_oapi.core.utils import Files as Files
from requests_toolbelt import MultipartEncoder as MultipartEncoder

class Schema:
    config: Config
    def __init__(self, config: Config) -> None: ...
    def create(self, request: CreateSchemaRequest, option: RequestOption | None = None) -> CreateSchemaResponse: ...
    async def acreate(self, request: CreateSchemaRequest, option: RequestOption | None = None) -> CreateSchemaResponse: ...
    def delete(self, request: DeleteSchemaRequest, option: RequestOption | None = None) -> DeleteSchemaResponse: ...
    async def adelete(self, request: DeleteSchemaRequest, option: RequestOption | None = None) -> DeleteSchemaResponse: ...
    def get(self, request: GetSchemaRequest, option: RequestOption | None = None) -> GetSchemaResponse: ...
    async def aget(self, request: GetSchemaRequest, option: RequestOption | None = None) -> GetSchemaResponse: ...
    def patch(self, request: PatchSchemaRequest, option: RequestOption | None = None) -> PatchSchemaResponse: ...
    async def apatch(self, request: PatchSchemaRequest, option: RequestOption | None = None) -> PatchSchemaResponse: ...
