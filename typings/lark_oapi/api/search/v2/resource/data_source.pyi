from ..model.create_data_source_request import CreateDataSourceRequest as CreateDataSourceRequest
from ..model.create_data_source_response import CreateDataSourceResponse as CreateDataSourceResponse
from ..model.delete_data_source_request import DeleteDataSourceRequest as DeleteDataSourceRequest
from ..model.delete_data_source_response import DeleteDataSourceResponse as DeleteDataSourceResponse
from ..model.get_data_source_request import GetDataSourceRequest as GetDataSourceRequest
from ..model.get_data_source_response import GetDataSourceResponse as GetDataSourceResponse
from ..model.list_data_source_request import ListDataSourceRequest as ListDataSourceRequest
from ..model.list_data_source_response import ListDataSourceResponse as ListDataSourceResponse
from ..model.patch_data_source_request import PatchDataSourceRequest as PatchDataSourceRequest
from ..model.patch_data_source_response import PatchDataSourceResponse as PatchDataSourceResponse
from lark_oapi.core import JSON as JSON
from lark_oapi.core.const import APPLICATION_JSON as APPLICATION_JSON, CONTENT_TYPE as CONTENT_TYPE, UTF_8 as UTF_8
from lark_oapi.core.http import Transport as Transport
from lark_oapi.core.model import Config as Config, RawResponse as RawResponse, RequestOption as RequestOption
from lark_oapi.core.token import verify as verify
from lark_oapi.core.utils import Files as Files
from requests_toolbelt import MultipartEncoder as MultipartEncoder

class DataSource:
    config: Config
    def __init__(self, config: Config) -> None: ...
    def create(self, request: CreateDataSourceRequest, option: RequestOption | None = None) -> CreateDataSourceResponse: ...
    async def acreate(self, request: CreateDataSourceRequest, option: RequestOption | None = None) -> CreateDataSourceResponse: ...
    def delete(self, request: DeleteDataSourceRequest, option: RequestOption | None = None) -> DeleteDataSourceResponse: ...
    async def adelete(self, request: DeleteDataSourceRequest, option: RequestOption | None = None) -> DeleteDataSourceResponse: ...
    def get(self, request: GetDataSourceRequest, option: RequestOption | None = None) -> GetDataSourceResponse: ...
    async def aget(self, request: GetDataSourceRequest, option: RequestOption | None = None) -> GetDataSourceResponse: ...
    def list(self, request: ListDataSourceRequest, option: RequestOption | None = None) -> ListDataSourceResponse: ...
    async def alist(self, request: ListDataSourceRequest, option: RequestOption | None = None) -> ListDataSourceResponse: ...
    def patch(self, request: PatchDataSourceRequest, option: RequestOption | None = None) -> PatchDataSourceResponse: ...
    async def apatch(self, request: PatchDataSourceRequest, option: RequestOption | None = None) -> PatchDataSourceResponse: ...
