from typing import *
from .schema_display_option import SchemaDisplayOption as SchemaDisplayOption
from lark_oapi.core.construct import init as init

class SchemaPropertyDefinition:
    name: Optional[str]
    is_returnable: Optional[bool]
    is_repeatable: Optional[bool]
    is_sortable: Optional[bool]
    is_facetable: Optional[bool]
    is_wildcard_searchable: Optional[bool]
    type: Optional[str]
    display_options: Optional[SchemaDisplayOption]
    def __init__(self, d=None) -> None: ...
    @staticmethod
    def builder() -> SchemaPropertyDefinitionBuilder: ...

class SchemaPropertyDefinitionBuilder:
    def __init__(self) -> None: ...
    def name(self, name: str) -> SchemaPropertyDefinitionBuilder: ...
    def is_returnable(self, is_returnable: bool) -> SchemaPropertyDefinitionBuilder: ...
    def is_repeatable(self, is_repeatable: bool) -> SchemaPropertyDefinitionBuilder: ...
    def is_sortable(self, is_sortable: bool) -> SchemaPropertyDefinitionBuilder: ...
    def is_facetable(self, is_facetable: bool) -> SchemaPropertyDefinitionBuilder: ...
    def is_wildcard_searchable(self, is_wildcard_searchable: bool) -> SchemaPropertyDefinitionBuilder: ...
    def type(self, type: str) -> SchemaPropertyDefinitionBuilder: ...
    def display_options(self, display_options: SchemaDisplayOption) -> SchemaPropertyDefinitionBuilder: ...
    def build(self) -> SchemaPropertyDefinition: ...
