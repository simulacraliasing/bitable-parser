from .i18n_meta import I18nMeta as I18nMeta
from .schema_predefine_enum_struct import SchemaPredefineEnumStruct as SchemaPredefineEnumStruct
from lark_oapi.core.construct import init as init

class SchemaFilterOptions:
    display_name: str | None
    i18n_display_name: I18nMeta | None
    option_mode: str | None
    associated_smart_filter: str | None
    filter_type: str | None
    predefine_enum_values: list[SchemaPredefineEnumStruct] | None
    enable_client_filter: bool | None
    reference_datasource_id: str | None
    def __init__(self, d=None) -> None: ...
    @staticmethod
    def builder() -> SchemaFilterOptionsBuilder: ...

class SchemaFilterOptionsBuilder:
    def __init__(self) -> None: ...
    def display_name(self, display_name: str) -> SchemaFilterOptionsBuilder: ...
    def i18n_display_name(self, i18n_display_name: I18nMeta) -> SchemaFilterOptionsBuilder: ...
    def option_mode(self, option_mode: str) -> SchemaFilterOptionsBuilder: ...
    def associated_smart_filter(self, associated_smart_filter: str) -> SchemaFilterOptionsBuilder: ...
    def filter_type(self, filter_type: str) -> SchemaFilterOptionsBuilder: ...
    def predefine_enum_values(self, predefine_enum_values: list[SchemaPredefineEnumStruct]) -> SchemaFilterOptionsBuilder: ...
    def enable_client_filter(self, enable_client_filter: bool) -> SchemaFilterOptionsBuilder: ...
    def reference_datasource_id(self, reference_datasource_id: str) -> SchemaFilterOptionsBuilder: ...
    def build(self) -> SchemaFilterOptions: ...
