from .dynamic_group_rule import DynamicGroupRule as DynamicGroupRule
from .group_visible_scope import GroupVisibleScope as GroupVisibleScope
from lark_oapi.core.construct import init as init

class Group:
    id: str | None
    name: str | None
    description: str | None
    member_user_count: int | None
    member_department_count: int | None
    type: int | None
    dynamic_group_rule: DynamicGroupRule | None
    visible_scope: GroupVisibleScope | None
    department_scope_list: list[str] | None
    group_id: str | None
    def __init__(self, d=None) -> None: ...
    @staticmethod
    def builder() -> GroupBuilder: ...

class GroupBuilder:
    def __init__(self) -> None: ...
    def id(self, id: str) -> GroupBuilder: ...
    def name(self, name: str) -> GroupBuilder: ...
    def description(self, description: str) -> GroupBuilder: ...
    def member_user_count(self, member_user_count: int) -> GroupBuilder: ...
    def member_department_count(self, member_department_count: int) -> GroupBuilder: ...
    def type(self, type: int) -> GroupBuilder: ...
    def dynamic_group_rule(self, dynamic_group_rule: DynamicGroupRule) -> GroupBuilder: ...
    def visible_scope(self, visible_scope: GroupVisibleScope) -> GroupBuilder: ...
    def department_scope_list(self, department_scope_list: list[str]) -> GroupBuilder: ...
    def group_id(self, group_id: str) -> GroupBuilder: ...
    def build(self) -> Group: ...
