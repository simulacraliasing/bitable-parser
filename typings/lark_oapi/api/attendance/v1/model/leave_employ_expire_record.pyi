from .lang_text import LangText as LangText
from lark_oapi.core.construct import init as init

class LeaveEmployExpireRecord:
    id: str | None
    employment_id: str | None
    leave_type_id: str | None
    granting_quantity: str | None
    left_granting_quantity: str | None
    granting_unit: int | None
    effective_date: str | None
    expiration_date: str | None
    reason: list[LangText] | None
    is_update_by_external: bool | None
    accrual_source: int | None
    leave_sub_type_id: str | None
    section_type: int | None
    def __init__(self, d=None) -> None: ...
    @staticmethod
    def builder() -> LeaveEmployExpireRecordBuilder: ...

class LeaveEmployExpireRecordBuilder:
    def __init__(self) -> None: ...
    def id(self, id: str) -> LeaveEmployExpireRecordBuilder: ...
    def employment_id(self, employment_id: str) -> LeaveEmployExpireRecordBuilder: ...
    def leave_type_id(self, leave_type_id: str) -> LeaveEmployExpireRecordBuilder: ...
    def granting_quantity(self, granting_quantity: str) -> LeaveEmployExpireRecordBuilder: ...
    def left_granting_quantity(self, left_granting_quantity: str) -> LeaveEmployExpireRecordBuilder: ...
    def granting_unit(self, granting_unit: int) -> LeaveEmployExpireRecordBuilder: ...
    def effective_date(self, effective_date: str) -> LeaveEmployExpireRecordBuilder: ...
    def expiration_date(self, expiration_date: str) -> LeaveEmployExpireRecordBuilder: ...
    def reason(self, reason: list[LangText]) -> LeaveEmployExpireRecordBuilder: ...
    def is_update_by_external(self, is_update_by_external: bool) -> LeaveEmployExpireRecordBuilder: ...
    def accrual_source(self, accrual_source: int) -> LeaveEmployExpireRecordBuilder: ...
    def leave_sub_type_id(self, leave_sub_type_id: str) -> LeaveEmployExpireRecordBuilder: ...
    def section_type(self, section_type: int) -> LeaveEmployExpireRecordBuilder: ...
    def build(self) -> LeaveEmployExpireRecord: ...
