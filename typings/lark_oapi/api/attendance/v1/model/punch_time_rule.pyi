from lark_oapi.core.construct import init as init

class PunchTimeRule:
    on_time: str | None
    off_time: str | None
    late_minutes_as_late: int | None
    late_minutes_as_lack: int | None
    on_advance_minutes: int | None
    early_minutes_as_early: int | None
    early_minutes_as_lack: int | None
    off_delay_minutes: int | None
    late_minutes_as_serious_late: int | None
    no_need_on: bool | None
    no_need_off: bool | None
    def __init__(self, d=None) -> None: ...
    @staticmethod
    def builder() -> PunchTimeRuleBuilder: ...

class PunchTimeRuleBuilder:
    def __init__(self) -> None: ...
    def on_time(self, on_time: str) -> PunchTimeRuleBuilder: ...
    def off_time(self, off_time: str) -> PunchTimeRuleBuilder: ...
    def late_minutes_as_late(self, late_minutes_as_late: int) -> PunchTimeRuleBuilder: ...
    def late_minutes_as_lack(self, late_minutes_as_lack: int) -> PunchTimeRuleBuilder: ...
    def on_advance_minutes(self, on_advance_minutes: int) -> PunchTimeRuleBuilder: ...
    def early_minutes_as_early(self, early_minutes_as_early: int) -> PunchTimeRuleBuilder: ...
    def early_minutes_as_lack(self, early_minutes_as_lack: int) -> PunchTimeRuleBuilder: ...
    def off_delay_minutes(self, off_delay_minutes: int) -> PunchTimeRuleBuilder: ...
    def late_minutes_as_serious_late(self, late_minutes_as_serious_late: int) -> PunchTimeRuleBuilder: ...
    def no_need_on(self, no_need_on: bool) -> PunchTimeRuleBuilder: ...
    def no_need_off(self, no_need_off: bool) -> PunchTimeRuleBuilder: ...
    def build(self) -> PunchTimeRule: ...
