from .region_place import RegionPlace as RegionPlace
from lark_oapi.core.construct import init as init

class UserTrip:
    approval_id: str | None
    start_time: str | None
    end_time: str | None
    reason: str | None
    approve_pass_time: str | None
    approve_apply_time: str | None
    idempotent_id: str | None
    correct_process_id: list[str] | None
    cancel_process_id: list[str] | None
    process_id: list[str] | None
    departure: RegionPlace | None
    destinations: list[RegionPlace] | None
    transportation: list[int] | None
    trip_type: int | None
    remarks: str | None
    def __init__(self, d=None) -> None: ...
    @staticmethod
    def builder() -> UserTripBuilder: ...

class UserTripBuilder:
    def __init__(self) -> None: ...
    def approval_id(self, approval_id: str) -> UserTripBuilder: ...
    def start_time(self, start_time: str) -> UserTripBuilder: ...
    def end_time(self, end_time: str) -> UserTripBuilder: ...
    def reason(self, reason: str) -> UserTripBuilder: ...
    def approve_pass_time(self, approve_pass_time: str) -> UserTripBuilder: ...
    def approve_apply_time(self, approve_apply_time: str) -> UserTripBuilder: ...
    def idempotent_id(self, idempotent_id: str) -> UserTripBuilder: ...
    def correct_process_id(self, correct_process_id: list[str]) -> UserTripBuilder: ...
    def cancel_process_id(self, cancel_process_id: list[str]) -> UserTripBuilder: ...
    def process_id(self, process_id: list[str]) -> UserTripBuilder: ...
    def departure(self, departure: RegionPlace) -> UserTripBuilder: ...
    def destinations(self, destinations: list[RegionPlace]) -> UserTripBuilder: ...
    def transportation(self, transportation: list[int]) -> UserTripBuilder: ...
    def trip_type(self, trip_type: int) -> UserTripBuilder: ...
    def remarks(self, remarks: str) -> UserTripBuilder: ...
    def build(self) -> UserTrip: ...
