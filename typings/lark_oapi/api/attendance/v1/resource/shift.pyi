from ..model.create_shift_request import CreateShiftRequest as CreateShiftRequest
from ..model.create_shift_response import CreateShiftResponse as CreateShiftResponse
from ..model.delete_shift_request import DeleteShiftRequest as DeleteShiftRequest
from ..model.delete_shift_response import DeleteShiftResponse as DeleteShiftResponse
from ..model.get_shift_request import GetShiftRequest as GetShiftRequest
from ..model.get_shift_response import GetShiftResponse as GetShiftResponse
from ..model.list_shift_request import ListShiftRequest as ListShiftRequest
from ..model.list_shift_response import ListShiftResponse as ListShiftResponse
from ..model.query_shift_request import QueryShiftRequest as QueryShiftRequest
from ..model.query_shift_response import QueryShiftResponse as QueryShiftResponse
from lark_oapi.core import JSON as JSON
from lark_oapi.core.const import APPLICATION_JSON as APPLICATION_JSON, CONTENT_TYPE as CONTENT_TYPE, UTF_8 as UTF_8
from lark_oapi.core.http import Transport as Transport
from lark_oapi.core.model import Config as Config, RawResponse as RawResponse, RequestOption as RequestOption
from lark_oapi.core.token import verify as verify
from lark_oapi.core.utils import Files as Files
from requests_toolbelt import MultipartEncoder as MultipartEncoder

class Shift:
    config: Config
    def __init__(self, config: Config) -> None: ...
    def create(self, request: CreateShiftRequest, option: RequestOption | None = None) -> CreateShiftResponse: ...
    async def acreate(self, request: CreateShiftRequest, option: RequestOption | None = None) -> CreateShiftResponse: ...
    def delete(self, request: DeleteShiftRequest, option: RequestOption | None = None) -> DeleteShiftResponse: ...
    async def adelete(self, request: DeleteShiftRequest, option: RequestOption | None = None) -> DeleteShiftResponse: ...
    def get(self, request: GetShiftRequest, option: RequestOption | None = None) -> GetShiftResponse: ...
    async def aget(self, request: GetShiftRequest, option: RequestOption | None = None) -> GetShiftResponse: ...
    def list(self, request: ListShiftRequest, option: RequestOption | None = None) -> ListShiftResponse: ...
    async def alist(self, request: ListShiftRequest, option: RequestOption | None = None) -> ListShiftResponse: ...
    def query(self, request: QueryShiftRequest, option: RequestOption | None = None) -> QueryShiftResponse: ...
    async def aquery(self, request: QueryShiftRequest, option: RequestOption | None = None) -> QueryShiftResponse: ...
