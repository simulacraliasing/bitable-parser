from .mention_event import MentionEvent as MentionEvent
from lark_oapi.core.construct import init as init

class EventMessage:
    message_id: str | None
    root_id: str | None
    parent_id: str | None
    create_time: int | None
    update_time: int | None
    chat_id: str | None
    thread_id: str | None
    chat_type: str | None
    message_type: str | None
    content: str | None
    mentions: list[MentionEvent] | None
    user_agent: str | None
    def __init__(self, d=None) -> None: ...
    @staticmethod
    def builder() -> EventMessageBuilder: ...

class EventMessageBuilder:
    def __init__(self) -> None: ...
    def message_id(self, message_id: str) -> EventMessageBuilder: ...
    def root_id(self, root_id: str) -> EventMessageBuilder: ...
    def parent_id(self, parent_id: str) -> EventMessageBuilder: ...
    def create_time(self, create_time: int) -> EventMessageBuilder: ...
    def update_time(self, update_time: int) -> EventMessageBuilder: ...
    def chat_id(self, chat_id: str) -> EventMessageBuilder: ...
    def thread_id(self, thread_id: str) -> EventMessageBuilder: ...
    def chat_type(self, chat_type: str) -> EventMessageBuilder: ...
    def message_type(self, message_type: str) -> EventMessageBuilder: ...
    def content(self, content: str) -> EventMessageBuilder: ...
    def mentions(self, mentions: list[MentionEvent]) -> EventMessageBuilder: ...
    def user_agent(self, user_agent: str) -> EventMessageBuilder: ...
    def build(self) -> EventMessage: ...
