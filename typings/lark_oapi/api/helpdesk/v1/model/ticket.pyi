from .comments import Comments as Comments
from .customized_field_display_item import CustomizedFieldDisplayItem as CustomizedFieldDisplayItem
from .i18n import I18n as I18n
from .ticket_user import TicketUser as TicketUser
from lark_oapi.core.construct import init as init

class Ticket:
    ticket_id: str | None
    helpdesk_id: str | None
    guest: TicketUser | None
    comments: Comments | None
    ticket_type: int | None
    status: int | None
    score: int | None
    created_at: int | None
    updated_at: int | None
    closed_at: int | None
    dissatisfaction_reason: I18n | None
    agents: list[TicketUser] | None
    channel: int | None
    solve: int | None
    closed_by: TicketUser | None
    collaborators: list[TicketUser] | None
    customized_fields: list[CustomizedFieldDisplayItem] | None
    agent_service_duration: float | None
    agent_first_response_duration: int | None
    bot_service_duration: int | None
    agent_resolution_time: int | None
    actual_processing_time: int | None
    agent_entry_time: int | None
    agent_first_response_time: int | None
    agent_last_response_time: int | None
    agent_owner: TicketUser | None
    def __init__(self, d=None) -> None: ...
    @staticmethod
    def builder() -> TicketBuilder: ...

class TicketBuilder:
    def __init__(self) -> None: ...
    def ticket_id(self, ticket_id: str) -> TicketBuilder: ...
    def helpdesk_id(self, helpdesk_id: str) -> TicketBuilder: ...
    def guest(self, guest: TicketUser) -> TicketBuilder: ...
    def comments(self, comments: Comments) -> TicketBuilder: ...
    def ticket_type(self, ticket_type: int) -> TicketBuilder: ...
    def status(self, status: int) -> TicketBuilder: ...
    def score(self, score: int) -> TicketBuilder: ...
    def created_at(self, created_at: int) -> TicketBuilder: ...
    def updated_at(self, updated_at: int) -> TicketBuilder: ...
    def closed_at(self, closed_at: int) -> TicketBuilder: ...
    def dissatisfaction_reason(self, dissatisfaction_reason: I18n) -> TicketBuilder: ...
    def agents(self, agents: list[TicketUser]) -> TicketBuilder: ...
    def channel(self, channel: int) -> TicketBuilder: ...
    def solve(self, solve: int) -> TicketBuilder: ...
    def closed_by(self, closed_by: TicketUser) -> TicketBuilder: ...
    def collaborators(self, collaborators: list[TicketUser]) -> TicketBuilder: ...
    def customized_fields(self, customized_fields: list[CustomizedFieldDisplayItem]) -> TicketBuilder: ...
    def agent_service_duration(self, agent_service_duration: float) -> TicketBuilder: ...
    def agent_first_response_duration(self, agent_first_response_duration: int) -> TicketBuilder: ...
    def bot_service_duration(self, bot_service_duration: int) -> TicketBuilder: ...
    def agent_resolution_time(self, agent_resolution_time: int) -> TicketBuilder: ...
    def actual_processing_time(self, actual_processing_time: int) -> TicketBuilder: ...
    def agent_entry_time(self, agent_entry_time: int) -> TicketBuilder: ...
    def agent_first_response_time(self, agent_first_response_time: int) -> TicketBuilder: ...
    def agent_last_response_time(self, agent_last_response_time: int) -> TicketBuilder: ...
    def agent_owner(self, agent_owner: TicketUser) -> TicketBuilder: ...
    def build(self) -> Ticket: ...
