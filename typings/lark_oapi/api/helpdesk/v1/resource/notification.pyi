from ..model.cancel_approve_notification_request import CancelApproveNotificationRequest as CancelApproveNotificationRequest
from ..model.cancel_approve_notification_response import CancelApproveNotificationResponse as CancelApproveNotificationResponse
from ..model.cancel_send_notification_request import CancelSendNotificationRequest as CancelSendNotificationRequest
from ..model.cancel_send_notification_response import CancelSendNotificationResponse as CancelSendNotificationResponse
from ..model.create_notification_request import CreateNotificationRequest as CreateNotificationRequest
from ..model.create_notification_response import CreateNotificationResponse as CreateNotificationResponse
from ..model.execute_send_notification_request import ExecuteSendNotificationRequest as ExecuteSendNotificationRequest
from ..model.execute_send_notification_response import ExecuteSendNotificationResponse as ExecuteSendNotificationResponse
from ..model.get_notification_request import GetNotificationRequest as GetNotificationRequest
from ..model.get_notification_response import GetNotificationResponse as GetNotificationResponse
from ..model.patch_notification_request import PatchNotificationRequest as PatchNotificationRequest
from ..model.patch_notification_response import PatchNotificationResponse as PatchNotificationResponse
from ..model.preview_notification_request import PreviewNotificationRequest as PreviewNotificationRequest
from ..model.preview_notification_response import PreviewNotificationResponse as PreviewNotificationResponse
from ..model.submit_approve_notification_request import SubmitApproveNotificationRequest as SubmitApproveNotificationRequest
from ..model.submit_approve_notification_response import SubmitApproveNotificationResponse as SubmitApproveNotificationResponse
from lark_oapi.core import JSON as JSON
from lark_oapi.core.const import APPLICATION_JSON as APPLICATION_JSON, CONTENT_TYPE as CONTENT_TYPE, UTF_8 as UTF_8
from lark_oapi.core.http import Transport as Transport
from lark_oapi.core.model import Config as Config, RawResponse as RawResponse, RequestOption as RequestOption
from lark_oapi.core.token import verify as verify
from lark_oapi.core.utils import Files as Files
from requests_toolbelt import MultipartEncoder as MultipartEncoder

class Notification:
    config: Config
    def __init__(self, config: Config) -> None: ...
    def cancel_approve(self, request: CancelApproveNotificationRequest, option: RequestOption | None = None) -> CancelApproveNotificationResponse: ...
    async def acancel_approve(self, request: CancelApproveNotificationRequest, option: RequestOption | None = None) -> CancelApproveNotificationResponse: ...
    def cancel_send(self, request: CancelSendNotificationRequest, option: RequestOption | None = None) -> CancelSendNotificationResponse: ...
    async def acancel_send(self, request: CancelSendNotificationRequest, option: RequestOption | None = None) -> CancelSendNotificationResponse: ...
    def create(self, request: CreateNotificationRequest, option: RequestOption | None = None) -> CreateNotificationResponse: ...
    async def acreate(self, request: CreateNotificationRequest, option: RequestOption | None = None) -> CreateNotificationResponse: ...
    def execute_send(self, request: ExecuteSendNotificationRequest, option: RequestOption | None = None) -> ExecuteSendNotificationResponse: ...
    async def aexecute_send(self, request: ExecuteSendNotificationRequest, option: RequestOption | None = None) -> ExecuteSendNotificationResponse: ...
    def get(self, request: GetNotificationRequest, option: RequestOption | None = None) -> GetNotificationResponse: ...
    async def aget(self, request: GetNotificationRequest, option: RequestOption | None = None) -> GetNotificationResponse: ...
    def patch(self, request: PatchNotificationRequest, option: RequestOption | None = None) -> PatchNotificationResponse: ...
    async def apatch(self, request: PatchNotificationRequest, option: RequestOption | None = None) -> PatchNotificationResponse: ...
    def preview(self, request: PreviewNotificationRequest, option: RequestOption | None = None) -> PreviewNotificationResponse: ...
    async def apreview(self, request: PreviewNotificationRequest, option: RequestOption | None = None) -> PreviewNotificationResponse: ...
    def submit_approve(self, request: SubmitApproveNotificationRequest, option: RequestOption | None = None) -> SubmitApproveNotificationResponse: ...
    async def asubmit_approve(self, request: SubmitApproveNotificationRequest, option: RequestOption | None = None) -> SubmitApproveNotificationResponse: ...
