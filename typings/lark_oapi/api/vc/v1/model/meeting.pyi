from .meeting_ability import MeetingAbility as MeetingAbility
from .meeting_participant import MeetingParticipant as MeetingParticipant
from .meeting_user import MeetingUser as MeetingUser
from lark_oapi.core.construct import init as init

class Meeting:
    id: int | None
    topic: str | None
    url: str | None
    meeting_no: str | None
    password: str | None
    create_time: int | None
    start_time: int | None
    end_time: int | None
    host_user: MeetingUser | None
    meeting_connect: bool | None
    status: int | None
    participant_count: int | None
    participant_count_accumulated: int | None
    participants: list[MeetingParticipant] | None
    ability: MeetingAbility | None
    def __init__(self, d=None) -> None: ...
    @staticmethod
    def builder() -> MeetingBuilder: ...

class MeetingBuilder:
    def __init__(self) -> None: ...
    def id(self, id: int) -> MeetingBuilder: ...
    def topic(self, topic: str) -> MeetingBuilder: ...
    def url(self, url: str) -> MeetingBuilder: ...
    def meeting_no(self, meeting_no: str) -> MeetingBuilder: ...
    def password(self, password: str) -> MeetingBuilder: ...
    def create_time(self, create_time: int) -> MeetingBuilder: ...
    def start_time(self, start_time: int) -> MeetingBuilder: ...
    def end_time(self, end_time: int) -> MeetingBuilder: ...
    def host_user(self, host_user: MeetingUser) -> MeetingBuilder: ...
    def meeting_connect(self, meeting_connect: bool) -> MeetingBuilder: ...
    def status(self, status: int) -> MeetingBuilder: ...
    def participant_count(self, participant_count: int) -> MeetingBuilder: ...
    def participant_count_accumulated(self, participant_count_accumulated: int) -> MeetingBuilder: ...
    def participants(self, participants: list[MeetingParticipant]) -> MeetingBuilder: ...
    def ability(self, ability: MeetingAbility) -> MeetingBuilder: ...
    def build(self) -> Meeting: ...
