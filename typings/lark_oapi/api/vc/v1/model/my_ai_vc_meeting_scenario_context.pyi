from .my_ai_av_plugin_context_system_info import MyAiAvPluginContextSystemInfo as MyAiAvPluginContextSystemInfo
from .my_ai_object_context import MyAiObjectContext as MyAiObjectContext
from .my_ai_plugin_context import MyAiPluginContext as MyAiPluginContext
from .my_ai_vc_meeting_extra import MyAiVcMeetingExtra as MyAiVcMeetingExtra
from lark_oapi.core.construct import init as init

class MyAiVcMeetingScenarioContext:
    plugins: list[MyAiPluginContext] | None
    object: MyAiObjectContext | None
    work_mode: int | None
    scenario: str | None
    extra: MyAiVcMeetingExtra | None
    system_info: MyAiAvPluginContextSystemInfo | None
    def __init__(self, d=None) -> None: ...
    @staticmethod
    def builder() -> MyAiVcMeetingScenarioContextBuilder: ...

class MyAiVcMeetingScenarioContextBuilder:
    def __init__(self) -> None: ...
    def plugins(self, plugins: list[MyAiPluginContext]) -> MyAiVcMeetingScenarioContextBuilder: ...
    def object(self, object: MyAiObjectContext) -> MyAiVcMeetingScenarioContextBuilder: ...
    def work_mode(self, work_mode: int) -> MyAiVcMeetingScenarioContextBuilder: ...
    def scenario(self, scenario: str) -> MyAiVcMeetingScenarioContextBuilder: ...
    def extra(self, extra: MyAiVcMeetingExtra) -> MyAiVcMeetingScenarioContextBuilder: ...
    def system_info(self, system_info: MyAiAvPluginContextSystemInfo) -> MyAiVcMeetingScenarioContextBuilder: ...
    def build(self) -> MyAiVcMeetingScenarioContext: ...
