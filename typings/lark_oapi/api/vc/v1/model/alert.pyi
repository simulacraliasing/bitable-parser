from .contact import Contact as Contact
from lark_oapi.core.construct import init as init

class Alert:
    alert_id: int | None
    resource_scope: str | None
    monitor_target: int | None
    alert_strategy: str | None
    alert_time: int | None
    alert_level: int | None
    contacts: list[Contact] | None
    notify_methods: list[int] | None
    alert_rule: str | None
    process_time: int | None
    recover_time: int | None
    process_status: int | None
    alert_rule_id: int | None
    monitor_target_room_id: str | None
    monitor_target_room_mac: str | None
    def __init__(self, d=None) -> None: ...
    @staticmethod
    def builder() -> AlertBuilder: ...

class AlertBuilder:
    def __init__(self) -> None: ...
    def alert_id(self, alert_id: int) -> AlertBuilder: ...
    def resource_scope(self, resource_scope: str) -> AlertBuilder: ...
    def monitor_target(self, monitor_target: int) -> AlertBuilder: ...
    def alert_strategy(self, alert_strategy: str) -> AlertBuilder: ...
    def alert_time(self, alert_time: int) -> AlertBuilder: ...
    def alert_level(self, alert_level: int) -> AlertBuilder: ...
    def contacts(self, contacts: list[Contact]) -> AlertBuilder: ...
    def notify_methods(self, notify_methods: list[int]) -> AlertBuilder: ...
    def alert_rule(self, alert_rule: str) -> AlertBuilder: ...
    def process_time(self, process_time: int) -> AlertBuilder: ...
    def recover_time(self, recover_time: int) -> AlertBuilder: ...
    def process_status(self, process_status: int) -> AlertBuilder: ...
    def alert_rule_id(self, alert_rule_id: int) -> AlertBuilder: ...
    def monitor_target_room_id(self, monitor_target_room_id: str) -> AlertBuilder: ...
    def monitor_target_room_mac(self, monitor_target_room_mac: str) -> AlertBuilder: ...
    def build(self) -> Alert: ...
