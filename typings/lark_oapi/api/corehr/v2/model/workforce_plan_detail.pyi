from .dimension_info import DimensionInfo as DimensionInfo
from .workforce_plan_eai_detail import WorkforcePlanEaiDetail as WorkforcePlanEaiDetail
from lark_oapi.core.construct import init as init

class WorkforcePlanDetail:
    workforce_plan_detail_id: str | None
    department: DimensionInfo | None
    employee_type: DimensionInfo | None
    work_location: DimensionInfo | None
    job_family: DimensionInfo | None
    job_level: DimensionInfo | None
    job: DimensionInfo | None
    cost_center: DimensionInfo | None
    workforce_plan: str | None
    active_individuals: str | None
    individuals_to_be_added: str | None
    individuals_to_be_removed: str | None
    vacancy: str | None
    vacancy_including_individuals_to_be_added_and_removed: str | None
    fulfillment_rate: str | None
    fulfillment_rate_including_individuals_to_be_added_and_removed: str | None
    estimated_active_individuals_detail: list[WorkforcePlanEaiDetail] | None
    is_missing_dimension: bool | None
    def __init__(self, d=None) -> None: ...
    @staticmethod
    def builder() -> WorkforcePlanDetailBuilder: ...

class WorkforcePlanDetailBuilder:
    def __init__(self) -> None: ...
    def workforce_plan_detail_id(self, workforce_plan_detail_id: str) -> WorkforcePlanDetailBuilder: ...
    def department(self, department: DimensionInfo) -> WorkforcePlanDetailBuilder: ...
    def employee_type(self, employee_type: DimensionInfo) -> WorkforcePlanDetailBuilder: ...
    def work_location(self, work_location: DimensionInfo) -> WorkforcePlanDetailBuilder: ...
    def job_family(self, job_family: DimensionInfo) -> WorkforcePlanDetailBuilder: ...
    def job_level(self, job_level: DimensionInfo) -> WorkforcePlanDetailBuilder: ...
    def job(self, job: DimensionInfo) -> WorkforcePlanDetailBuilder: ...
    def cost_center(self, cost_center: DimensionInfo) -> WorkforcePlanDetailBuilder: ...
    def workforce_plan(self, workforce_plan: str) -> WorkforcePlanDetailBuilder: ...
    def active_individuals(self, active_individuals: str) -> WorkforcePlanDetailBuilder: ...
    def individuals_to_be_added(self, individuals_to_be_added: str) -> WorkforcePlanDetailBuilder: ...
    def individuals_to_be_removed(self, individuals_to_be_removed: str) -> WorkforcePlanDetailBuilder: ...
    def vacancy(self, vacancy: str) -> WorkforcePlanDetailBuilder: ...
    def vacancy_including_individuals_to_be_added_and_removed(self, vacancy_including_individuals_to_be_added_and_removed: str) -> WorkforcePlanDetailBuilder: ...
    def fulfillment_rate(self, fulfillment_rate: str) -> WorkforcePlanDetailBuilder: ...
    def fulfillment_rate_including_individuals_to_be_added_and_removed(self, fulfillment_rate_including_individuals_to_be_added_and_removed: str) -> WorkforcePlanDetailBuilder: ...
    def estimated_active_individuals_detail(self, estimated_active_individuals_detail: list[WorkforcePlanEaiDetail]) -> WorkforcePlanDetailBuilder: ...
    def is_missing_dimension(self, is_missing_dimension: bool) -> WorkforcePlanDetailBuilder: ...
    def build(self) -> WorkforcePlanDetail: ...
