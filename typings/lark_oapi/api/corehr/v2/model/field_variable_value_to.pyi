from .field_variable_value_i18n import FieldVariableValueI18n as FieldVariableValueI18n
from .field_variable_value_to_file import FieldVariableValueToFile as FieldVariableValueToFile
from .field_variable_value_to_object import FieldVariableValueToObject as FieldVariableValueToObject
from .field_variable_value_to_record import FieldVariableValueToRecord as FieldVariableValueToRecord
from lark_oapi.core.construct import init as init

class FieldVariableValueTo:
    text_value: str | None
    bool_value: bool | None
    number_value: str | None
    enum_value: str | None
    date_value: str | None
    date_time_value: str | None
    i18n_value: FieldVariableValueI18n | None
    object_value: FieldVariableValueToObject | None
    user_value: str | None
    department_value: str | None
    record_values: list[FieldVariableValueToRecord] | None
    employment_value: str | None
    list_values: list[str] | None
    file_value: FieldVariableValueToFile | None
    def __init__(self, d=None) -> None: ...
    @staticmethod
    def builder() -> FieldVariableValueToBuilder: ...

class FieldVariableValueToBuilder:
    def __init__(self) -> None: ...
    def text_value(self, text_value: str) -> FieldVariableValueToBuilder: ...
    def bool_value(self, bool_value: bool) -> FieldVariableValueToBuilder: ...
    def number_value(self, number_value: str) -> FieldVariableValueToBuilder: ...
    def enum_value(self, enum_value: str) -> FieldVariableValueToBuilder: ...
    def date_value(self, date_value: str) -> FieldVariableValueToBuilder: ...
    def date_time_value(self, date_time_value: str) -> FieldVariableValueToBuilder: ...
    def i18n_value(self, i18n_value: FieldVariableValueI18n) -> FieldVariableValueToBuilder: ...
    def object_value(self, object_value: FieldVariableValueToObject) -> FieldVariableValueToBuilder: ...
    def user_value(self, user_value: str) -> FieldVariableValueToBuilder: ...
    def department_value(self, department_value: str) -> FieldVariableValueToBuilder: ...
    def record_values(self, record_values: list[FieldVariableValueToRecord]) -> FieldVariableValueToBuilder: ...
    def employment_value(self, employment_value: str) -> FieldVariableValueToBuilder: ...
    def list_values(self, list_values: list[str]) -> FieldVariableValueToBuilder: ...
    def file_value(self, file_value: FieldVariableValueToFile) -> FieldVariableValueToBuilder: ...
    def build(self) -> FieldVariableValueTo: ...
