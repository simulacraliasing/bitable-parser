from .address import Address as Address
from .cost_allocation import CostAllocation as CostAllocation
from .custom_field_data import CustomFieldData as CustomFieldData
from .default_cost_center import DefaultCostCenter as DefaultCostCenter
from .enum import Enum as Enum
from .job_data_cost_center import JobDataCostCenter as JobDataCostCenter
from .notice_period_detail import NoticePeriodDetail as NoticePeriodDetail
from .pre_hire_abnormal_reason import PreHireAbnormalReason as PreHireAbnormalReason
from .pre_hire_pay_group_info import PreHirePayGroupInfo as PreHirePayGroupInfo
from .prehire_seniority_adjust_information_query import PrehireSeniorityAdjustInformationQuery as PrehireSeniorityAdjustInformationQuery
from lark_oapi.core.construct import init as init

class PreHireEmploymentInfo:
    department_id: str | None
    cost_center_rates: list[JobDataCostCenter] | None
    office_location_id: str | None
    work_location_id: str | None
    work_station: str | None
    worker_id: str | None
    compensation_type: Enum | None
    direct_leader_id: str | None
    dotted_line_manager_id: str | None
    job_id: str | None
    job_family_id: str | None
    job_level_id: str | None
    job_grade_id: str | None
    job_title: str | None
    employee_type_id: str | None
    employee_subtype_id: str | None
    employment_type: str | None
    work_email: str | None
    company_id: str | None
    social_security_city_id: str | None
    non_compete_covenant: bool | None
    weekly_working_hours: int | None
    rehire: str | None
    rehire_employment_id: str | None
    working_hours_type: str | None
    weekly_working_hours_v2: float | None
    office_address: Address | None
    working_calendar_id: str | None
    updated_at: str | None
    suspected_rehiring: bool | None
    condition_worker: bool | None
    custom_fields: list[CustomFieldData] | None
    position_id: str | None
    company_manual_updated: bool | None
    pay_group: PreHirePayGroupInfo | None
    whether_the_information_is_abnormal: bool | None
    abnormal_reason: list[PreHireAbnormalReason] | None
    has_offer_salary: bool | None
    recruitment_project_id: str | None
    work_shift: Enum | None
    created_at: str | None
    created_by: str | None
    updated_by: str | None
    seniority_date: str | None
    background_check_order_id: str | None
    background_check_order_name: str | None
    background_check_order_package_name: str | None
    background_check_order_result: str | None
    background_check_order_supplier_name: str | None
    background_check_order_account_name: str | None
    background_check_order_start_time: str | None
    background_check_order_complete_time: str | None
    background_check_order_status: Enum | None
    seniority_adjust_information_list: list[PrehireSeniorityAdjustInformationQuery] | None
    notice_period_positive_voluntary: NoticePeriodDetail | None
    notice_period_probation_involuntary: NoticePeriodDetail | None
    notice_period_positive_involuntary: NoticePeriodDetail | None
    notice_period_probation_voluntary: NoticePeriodDetail | None
    working_hours_type_manual_updated: bool | None
    is_over_due: bool | None
    task_completed: bool | None
    expected_graduate_date: str | None
    service_company: str | None
    pathway: str | None
    default_cost_center: DefaultCostCenter | None
    cost_allocation: CostAllocation | None
    reuse_feishu_account: str | None
    reused_feishu_account_id: str | None
    def __init__(self, d=None) -> None: ...
    @staticmethod
    def builder() -> PreHireEmploymentInfoBuilder: ...

class PreHireEmploymentInfoBuilder:
    def __init__(self) -> None: ...
    def department_id(self, department_id: str) -> PreHireEmploymentInfoBuilder: ...
    def cost_center_rates(self, cost_center_rates: list[JobDataCostCenter]) -> PreHireEmploymentInfoBuilder: ...
    def office_location_id(self, office_location_id: str) -> PreHireEmploymentInfoBuilder: ...
    def work_location_id(self, work_location_id: str) -> PreHireEmploymentInfoBuilder: ...
    def work_station(self, work_station: str) -> PreHireEmploymentInfoBuilder: ...
    def worker_id(self, worker_id: str) -> PreHireEmploymentInfoBuilder: ...
    def compensation_type(self, compensation_type: Enum) -> PreHireEmploymentInfoBuilder: ...
    def direct_leader_id(self, direct_leader_id: str) -> PreHireEmploymentInfoBuilder: ...
    def dotted_line_manager_id(self, dotted_line_manager_id: str) -> PreHireEmploymentInfoBuilder: ...
    def job_id(self, job_id: str) -> PreHireEmploymentInfoBuilder: ...
    def job_family_id(self, job_family_id: str) -> PreHireEmploymentInfoBuilder: ...
    def job_level_id(self, job_level_id: str) -> PreHireEmploymentInfoBuilder: ...
    def job_grade_id(self, job_grade_id: str) -> PreHireEmploymentInfoBuilder: ...
    def job_title(self, job_title: str) -> PreHireEmploymentInfoBuilder: ...
    def employee_type_id(self, employee_type_id: str) -> PreHireEmploymentInfoBuilder: ...
    def employee_subtype_id(self, employee_subtype_id: str) -> PreHireEmploymentInfoBuilder: ...
    def employment_type(self, employment_type: str) -> PreHireEmploymentInfoBuilder: ...
    def work_email(self, work_email: str) -> PreHireEmploymentInfoBuilder: ...
    def company_id(self, company_id: str) -> PreHireEmploymentInfoBuilder: ...
    def social_security_city_id(self, social_security_city_id: str) -> PreHireEmploymentInfoBuilder: ...
    def non_compete_covenant(self, non_compete_covenant: bool) -> PreHireEmploymentInfoBuilder: ...
    def weekly_working_hours(self, weekly_working_hours: int) -> PreHireEmploymentInfoBuilder: ...
    def rehire(self, rehire: str) -> PreHireEmploymentInfoBuilder: ...
    def rehire_employment_id(self, rehire_employment_id: str) -> PreHireEmploymentInfoBuilder: ...
    def working_hours_type(self, working_hours_type: str) -> PreHireEmploymentInfoBuilder: ...
    def weekly_working_hours_v2(self, weekly_working_hours_v2: float) -> PreHireEmploymentInfoBuilder: ...
    def office_address(self, office_address: Address) -> PreHireEmploymentInfoBuilder: ...
    def working_calendar_id(self, working_calendar_id: str) -> PreHireEmploymentInfoBuilder: ...
    def updated_at(self, updated_at: str) -> PreHireEmploymentInfoBuilder: ...
    def suspected_rehiring(self, suspected_rehiring: bool) -> PreHireEmploymentInfoBuilder: ...
    def condition_worker(self, condition_worker: bool) -> PreHireEmploymentInfoBuilder: ...
    def custom_fields(self, custom_fields: list[CustomFieldData]) -> PreHireEmploymentInfoBuilder: ...
    def position_id(self, position_id: str) -> PreHireEmploymentInfoBuilder: ...
    def company_manual_updated(self, company_manual_updated: bool) -> PreHireEmploymentInfoBuilder: ...
    def pay_group(self, pay_group: PreHirePayGroupInfo) -> PreHireEmploymentInfoBuilder: ...
    def whether_the_information_is_abnormal(self, whether_the_information_is_abnormal: bool) -> PreHireEmploymentInfoBuilder: ...
    def abnormal_reason(self, abnormal_reason: list[PreHireAbnormalReason]) -> PreHireEmploymentInfoBuilder: ...
    def has_offer_salary(self, has_offer_salary: bool) -> PreHireEmploymentInfoBuilder: ...
    def recruitment_project_id(self, recruitment_project_id: str) -> PreHireEmploymentInfoBuilder: ...
    def work_shift(self, work_shift: Enum) -> PreHireEmploymentInfoBuilder: ...
    def created_at(self, created_at: str) -> PreHireEmploymentInfoBuilder: ...
    def created_by(self, created_by: str) -> PreHireEmploymentInfoBuilder: ...
    def updated_by(self, updated_by: str) -> PreHireEmploymentInfoBuilder: ...
    def seniority_date(self, seniority_date: str) -> PreHireEmploymentInfoBuilder: ...
    def background_check_order_id(self, background_check_order_id: str) -> PreHireEmploymentInfoBuilder: ...
    def background_check_order_name(self, background_check_order_name: str) -> PreHireEmploymentInfoBuilder: ...
    def background_check_order_package_name(self, background_check_order_package_name: str) -> PreHireEmploymentInfoBuilder: ...
    def background_check_order_result(self, background_check_order_result: str) -> PreHireEmploymentInfoBuilder: ...
    def background_check_order_supplier_name(self, background_check_order_supplier_name: str) -> PreHireEmploymentInfoBuilder: ...
    def background_check_order_account_name(self, background_check_order_account_name: str) -> PreHireEmploymentInfoBuilder: ...
    def background_check_order_start_time(self, background_check_order_start_time: str) -> PreHireEmploymentInfoBuilder: ...
    def background_check_order_complete_time(self, background_check_order_complete_time: str) -> PreHireEmploymentInfoBuilder: ...
    def background_check_order_status(self, background_check_order_status: Enum) -> PreHireEmploymentInfoBuilder: ...
    def seniority_adjust_information_list(self, seniority_adjust_information_list: list[PrehireSeniorityAdjustInformationQuery]) -> PreHireEmploymentInfoBuilder: ...
    def notice_period_positive_voluntary(self, notice_period_positive_voluntary: NoticePeriodDetail) -> PreHireEmploymentInfoBuilder: ...
    def notice_period_probation_involuntary(self, notice_period_probation_involuntary: NoticePeriodDetail) -> PreHireEmploymentInfoBuilder: ...
    def notice_period_positive_involuntary(self, notice_period_positive_involuntary: NoticePeriodDetail) -> PreHireEmploymentInfoBuilder: ...
    def notice_period_probation_voluntary(self, notice_period_probation_voluntary: NoticePeriodDetail) -> PreHireEmploymentInfoBuilder: ...
    def working_hours_type_manual_updated(self, working_hours_type_manual_updated: bool) -> PreHireEmploymentInfoBuilder: ...
    def is_over_due(self, is_over_due: bool) -> PreHireEmploymentInfoBuilder: ...
    def task_completed(self, task_completed: bool) -> PreHireEmploymentInfoBuilder: ...
    def expected_graduate_date(self, expected_graduate_date: str) -> PreHireEmploymentInfoBuilder: ...
    def service_company(self, service_company: str) -> PreHireEmploymentInfoBuilder: ...
    def pathway(self, pathway: str) -> PreHireEmploymentInfoBuilder: ...
    def default_cost_center(self, default_cost_center: DefaultCostCenter) -> PreHireEmploymentInfoBuilder: ...
    def cost_allocation(self, cost_allocation: CostAllocation) -> PreHireEmploymentInfoBuilder: ...
    def reuse_feishu_account(self, reuse_feishu_account: str) -> PreHireEmploymentInfoBuilder: ...
    def reused_feishu_account_id(self, reused_feishu_account_id: str) -> PreHireEmploymentInfoBuilder: ...
    def build(self) -> PreHireEmploymentInfo: ...
