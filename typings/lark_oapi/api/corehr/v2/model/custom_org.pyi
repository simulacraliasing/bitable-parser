from .custom_field_data import CustomFieldData as CustomFieldData
from .i18n import I18n as I18n
from .match_rules import MatchRules as MatchRules
from .org_role import OrgRole as OrgRole
from lark_oapi.core.construct import init as init

class CustomOrg:
    object_api_name: str | None
    names: list[I18n] | None
    code: str | None
    parent_id: str | None
    manager_ids: list[str] | None
    description: list[I18n] | None
    effective_time: str | None
    org_roles: list[OrgRole] | None
    match_rule_groups: list[MatchRules] | None
    active: bool | None
    org_id: str | None
    custom_fields: list[CustomFieldData] | None
    def __init__(self, d=None) -> None: ...
    @staticmethod
    def builder() -> CustomOrgBuilder: ...

class CustomOrgBuilder:
    def __init__(self) -> None: ...
    def object_api_name(self, object_api_name: str) -> CustomOrgBuilder: ...
    def names(self, names: list[I18n]) -> CustomOrgBuilder: ...
    def code(self, code: str) -> CustomOrgBuilder: ...
    def parent_id(self, parent_id: str) -> CustomOrgBuilder: ...
    def manager_ids(self, manager_ids: list[str]) -> CustomOrgBuilder: ...
    def description(self, description: list[I18n]) -> CustomOrgBuilder: ...
    def effective_time(self, effective_time: str) -> CustomOrgBuilder: ...
    def org_roles(self, org_roles: list[OrgRole]) -> CustomOrgBuilder: ...
    def match_rule_groups(self, match_rule_groups: list[MatchRules]) -> CustomOrgBuilder: ...
    def active(self, active: bool) -> CustomOrgBuilder: ...
    def org_id(self, org_id: str) -> CustomOrgBuilder: ...
    def custom_fields(self, custom_fields: list[CustomFieldData]) -> CustomOrgBuilder: ...
    def build(self) -> CustomOrg: ...
