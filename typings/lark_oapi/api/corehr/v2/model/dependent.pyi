from .address import Address as Address
from .custom_field_data import CustomFieldData as CustomFieldData
from .enum import Enum as Enum
from .file import File as File
from .national_id import NationalId as NationalId
from .person_name import PersonName as PersonName
from .phone import Phone as Phone
from lark_oapi.core.construct import init as init

class Dependent:
    id: str | None
    name: PersonName | None
    relationship: Enum | None
    gender: Enum | None
    date_of_birth: str | None
    nationality_id: str | None
    nationality_id_v2: str | None
    national_id_list: list[NationalId] | None
    spouses_working_status: Enum | None
    is_this_person_covered_by_health_insurance: bool | None
    is_this_person_allowed_for_tax_deduction: bool | None
    custom_fields: list[CustomFieldData] | None
    dependent_name: str | None
    employer: str | None
    job: str | None
    phone: Phone | None
    address: Address | None
    birth_certificate_of_child: list[File] | None
    def __init__(self, d=None) -> None: ...
    @staticmethod
    def builder() -> DependentBuilder: ...

class DependentBuilder:
    def __init__(self) -> None: ...
    def id(self, id: str) -> DependentBuilder: ...
    def name(self, name: PersonName) -> DependentBuilder: ...
    def relationship(self, relationship: Enum) -> DependentBuilder: ...
    def gender(self, gender: Enum) -> DependentBuilder: ...
    def date_of_birth(self, date_of_birth: str) -> DependentBuilder: ...
    def nationality_id(self, nationality_id: str) -> DependentBuilder: ...
    def nationality_id_v2(self, nationality_id_v2: str) -> DependentBuilder: ...
    def national_id_list(self, national_id_list: list[NationalId]) -> DependentBuilder: ...
    def spouses_working_status(self, spouses_working_status: Enum) -> DependentBuilder: ...
    def is_this_person_covered_by_health_insurance(self, is_this_person_covered_by_health_insurance: bool) -> DependentBuilder: ...
    def is_this_person_allowed_for_tax_deduction(self, is_this_person_allowed_for_tax_deduction: bool) -> DependentBuilder: ...
    def custom_fields(self, custom_fields: list[CustomFieldData]) -> DependentBuilder: ...
    def dependent_name(self, dependent_name: str) -> DependentBuilder: ...
    def employer(self, employer: str) -> DependentBuilder: ...
    def job(self, job: str) -> DependentBuilder: ...
    def phone(self, phone: Phone) -> DependentBuilder: ...
    def address(self, address: Address) -> DependentBuilder: ...
    def birth_certificate_of_child(self, birth_certificate_of_child: list[File]) -> DependentBuilder: ...
    def build(self) -> Dependent: ...
