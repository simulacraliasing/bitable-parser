from .address import Address as Address
from .bank_account import BankAccount as BankAccount
from .citizenship_status import CitizenshipStatus as CitizenshipStatus
from .custom_field_data import CustomFieldData as CustomFieldData
from .dependent import Dependent as Dependent
from .education import Education as Education
from .email import Email as Email
from .emergency_contact import EmergencyContact as EmergencyContact
from .enum import Enum as Enum
from .national_id import NationalId as NationalId
from .nationality import Nationality as Nationality
from .person_name import PersonName as PersonName
from .personal_profile import PersonalProfile as PersonalProfile
from .phone import Phone as Phone
from .resident_tax import ResidentTax as ResidentTax
from .work_experience_info import WorkExperienceInfo as WorkExperienceInfo
from lark_oapi.core.construct import init as init

class PersonInfoBt:
    person_id: str | None
    phone_number: str | None
    legal_name: str | None
    additional_name: str | None
    preferred_name: str | None
    preferred_local_full_name: str | None
    preferred_english_full_name: str | None
    name_list: list[PersonName] | None
    gender: Enum | None
    date_of_birth: str | None
    nationality_id: str | None
    nationality_id_v2: str | None
    additional_nationalities: list[Nationality] | None
    citizenship_status: list[CitizenshipStatus] | None
    race: Enum | None
    marital_status: Enum | None
    phone_list: list[Phone] | None
    address_list: list[Address] | None
    email_list: list[Email] | None
    work_experience_list: list[WorkExperienceInfo] | None
    education_list: list[Education] | None
    bank_account_list: list[BankAccount] | None
    national_id_list: list[NationalId] | None
    dependent_list: list[Dependent] | None
    emergency_contact_list: list[EmergencyContact] | None
    date_entered_workforce: str | None
    working_years: int | None
    profile_image_id: str | None
    email_address: str | None
    age: int | None
    highest_level_of_education: Education | None
    highest_degree_of_education: Education | None
    personal_profile: list[PersonalProfile] | None
    native_region: str | None
    hukou_type: Enum | None
    hukou_location: str | None
    political_affiliations: list[Enum] | None
    talent_id: str | None
    custom_fields: list[CustomFieldData] | None
    national_id_number: str | None
    family_address: str | None
    born_country_region: str | None
    is_disabled: bool | None
    disable_card_number: str | None
    is_martyr_family: bool | None
    martyr_card_number: str | None
    is_old_alone: bool | None
    resident_taxes: list[ResidentTax] | None
    first_entry_time: str | None
    leave_time: str | None
    religion: Enum | None
    working_years_v2: float | None
    def __init__(self, d=None) -> None: ...
    @staticmethod
    def builder() -> PersonInfoBtBuilder: ...

class PersonInfoBtBuilder:
    def __init__(self) -> None: ...
    def person_id(self, person_id: str) -> PersonInfoBtBuilder: ...
    def phone_number(self, phone_number: str) -> PersonInfoBtBuilder: ...
    def legal_name(self, legal_name: str) -> PersonInfoBtBuilder: ...
    def additional_name(self, additional_name: str) -> PersonInfoBtBuilder: ...
    def preferred_name(self, preferred_name: str) -> PersonInfoBtBuilder: ...
    def preferred_local_full_name(self, preferred_local_full_name: str) -> PersonInfoBtBuilder: ...
    def preferred_english_full_name(self, preferred_english_full_name: str) -> PersonInfoBtBuilder: ...
    def name_list(self, name_list: list[PersonName]) -> PersonInfoBtBuilder: ...
    def gender(self, gender: Enum) -> PersonInfoBtBuilder: ...
    def date_of_birth(self, date_of_birth: str) -> PersonInfoBtBuilder: ...
    def nationality_id(self, nationality_id: str) -> PersonInfoBtBuilder: ...
    def nationality_id_v2(self, nationality_id_v2: str) -> PersonInfoBtBuilder: ...
    def additional_nationalities(self, additional_nationalities: list[Nationality]) -> PersonInfoBtBuilder: ...
    def citizenship_status(self, citizenship_status: list[CitizenshipStatus]) -> PersonInfoBtBuilder: ...
    def race(self, race: Enum) -> PersonInfoBtBuilder: ...
    def marital_status(self, marital_status: Enum) -> PersonInfoBtBuilder: ...
    def phone_list(self, phone_list: list[Phone]) -> PersonInfoBtBuilder: ...
    def address_list(self, address_list: list[Address]) -> PersonInfoBtBuilder: ...
    def email_list(self, email_list: list[Email]) -> PersonInfoBtBuilder: ...
    def work_experience_list(self, work_experience_list: list[WorkExperienceInfo]) -> PersonInfoBtBuilder: ...
    def education_list(self, education_list: list[Education]) -> PersonInfoBtBuilder: ...
    def bank_account_list(self, bank_account_list: list[BankAccount]) -> PersonInfoBtBuilder: ...
    def national_id_list(self, national_id_list: list[NationalId]) -> PersonInfoBtBuilder: ...
    def dependent_list(self, dependent_list: list[Dependent]) -> PersonInfoBtBuilder: ...
    def emergency_contact_list(self, emergency_contact_list: list[EmergencyContact]) -> PersonInfoBtBuilder: ...
    def date_entered_workforce(self, date_entered_workforce: str) -> PersonInfoBtBuilder: ...
    def working_years(self, working_years: int) -> PersonInfoBtBuilder: ...
    def profile_image_id(self, profile_image_id: str) -> PersonInfoBtBuilder: ...
    def email_address(self, email_address: str) -> PersonInfoBtBuilder: ...
    def age(self, age: int) -> PersonInfoBtBuilder: ...
    def highest_level_of_education(self, highest_level_of_education: Education) -> PersonInfoBtBuilder: ...
    def highest_degree_of_education(self, highest_degree_of_education: Education) -> PersonInfoBtBuilder: ...
    def personal_profile(self, personal_profile: list[PersonalProfile]) -> PersonInfoBtBuilder: ...
    def native_region(self, native_region: str) -> PersonInfoBtBuilder: ...
    def hukou_type(self, hukou_type: Enum) -> PersonInfoBtBuilder: ...
    def hukou_location(self, hukou_location: str) -> PersonInfoBtBuilder: ...
    def political_affiliations(self, political_affiliations: list[Enum]) -> PersonInfoBtBuilder: ...
    def talent_id(self, talent_id: str) -> PersonInfoBtBuilder: ...
    def custom_fields(self, custom_fields: list[CustomFieldData]) -> PersonInfoBtBuilder: ...
    def national_id_number(self, national_id_number: str) -> PersonInfoBtBuilder: ...
    def family_address(self, family_address: str) -> PersonInfoBtBuilder: ...
    def born_country_region(self, born_country_region: str) -> PersonInfoBtBuilder: ...
    def is_disabled(self, is_disabled: bool) -> PersonInfoBtBuilder: ...
    def disable_card_number(self, disable_card_number: str) -> PersonInfoBtBuilder: ...
    def is_martyr_family(self, is_martyr_family: bool) -> PersonInfoBtBuilder: ...
    def martyr_card_number(self, martyr_card_number: str) -> PersonInfoBtBuilder: ...
    def is_old_alone(self, is_old_alone: bool) -> PersonInfoBtBuilder: ...
    def resident_taxes(self, resident_taxes: list[ResidentTax]) -> PersonInfoBtBuilder: ...
    def first_entry_time(self, first_entry_time: str) -> PersonInfoBtBuilder: ...
    def leave_time(self, leave_time: str) -> PersonInfoBtBuilder: ...
    def religion(self, religion: Enum) -> PersonInfoBtBuilder: ...
    def working_years_v2(self, working_years_v2: float) -> PersonInfoBtBuilder: ...
    def build(self) -> PersonInfoBt: ...
