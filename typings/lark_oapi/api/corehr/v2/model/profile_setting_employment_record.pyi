from .profile_setting_cost_center import ProfileSettingCostCenter as ProfileSettingCostCenter
from lark_oapi.core.construct import init as init

class ProfileSettingEmploymentRecord:
    employee_type: str | None
    department: str | None
    direct_manager: str | None
    working_hours_type: str | None
    cost_centers: list[ProfileSettingCostCenter] | None
    direct_manager_effective_time: str | None
    dotted_line_manager: str | None
    dotted_line_manager_effective_time: str | None
    job: str | None
    job_family: str | None
    job_level: str | None
    job_grade: str | None
    work_location: str | None
    weekly_working_hours: int | None
    position: str | None
    pathway: str | None
    def __init__(self, d=None) -> None: ...
    @staticmethod
    def builder() -> ProfileSettingEmploymentRecordBuilder: ...

class ProfileSettingEmploymentRecordBuilder:
    def __init__(self) -> None: ...
    def employee_type(self, employee_type: str) -> ProfileSettingEmploymentRecordBuilder: ...
    def department(self, department: str) -> ProfileSettingEmploymentRecordBuilder: ...
    def direct_manager(self, direct_manager: str) -> ProfileSettingEmploymentRecordBuilder: ...
    def working_hours_type(self, working_hours_type: str) -> ProfileSettingEmploymentRecordBuilder: ...
    def cost_centers(self, cost_centers: list[ProfileSettingCostCenter]) -> ProfileSettingEmploymentRecordBuilder: ...
    def direct_manager_effective_time(self, direct_manager_effective_time: str) -> ProfileSettingEmploymentRecordBuilder: ...
    def dotted_line_manager(self, dotted_line_manager: str) -> ProfileSettingEmploymentRecordBuilder: ...
    def dotted_line_manager_effective_time(self, dotted_line_manager_effective_time: str) -> ProfileSettingEmploymentRecordBuilder: ...
    def job(self, job: str) -> ProfileSettingEmploymentRecordBuilder: ...
    def job_family(self, job_family: str) -> ProfileSettingEmploymentRecordBuilder: ...
    def job_level(self, job_level: str) -> ProfileSettingEmploymentRecordBuilder: ...
    def job_grade(self, job_grade: str) -> ProfileSettingEmploymentRecordBuilder: ...
    def work_location(self, work_location: str) -> ProfileSettingEmploymentRecordBuilder: ...
    def weekly_working_hours(self, weekly_working_hours: int) -> ProfileSettingEmploymentRecordBuilder: ...
    def position(self, position: str) -> ProfileSettingEmploymentRecordBuilder: ...
    def pathway(self, pathway: str) -> ProfileSettingEmploymentRecordBuilder: ...
    def build(self) -> ProfileSettingEmploymentRecord: ...
