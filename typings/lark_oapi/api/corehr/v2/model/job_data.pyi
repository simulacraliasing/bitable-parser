from .basic_job_data import BasicJobData as BasicJobData
from .custom_field_data import CustomFieldData as CustomFieldData
from .enum import Enum as Enum
from .job_data_cost_center import JobDataCostCenter as JobDataCostCenter
from lark_oapi.core.construct import init as init

class JobData:
    job_data_id: str | None
    version_id: str | None
    employee_type_id: str | None
    working_hours_type_id: str | None
    work_location_id: str | None
    department_id: str | None
    position_id: str | None
    job_id: str | None
    job_level_id: str | None
    job_grade_id: str | None
    job_family_id: str | None
    probation_start_date: str | None
    probation_end_date: str | None
    primary_job_data: bool | None
    employment_id: str | None
    effective_time: str | None
    expiration_time: str | None
    assignment_start_reason: Enum | None
    probation_expected_end_date: str | None
    probation_outcome: Enum | None
    direct_manager: BasicJobData | None
    dotted_line_managers: list[BasicJobData] | None
    second_direct_manager: BasicJobData | None
    cost_center_rates: list[JobDataCostCenter] | None
    work_shift: Enum | None
    compensation_type: Enum | None
    service_company: str | None
    custom_fields: list[CustomFieldData] | None
    created_at: str | None
    weekly_working_hours_v2: float | None
    weekly_working_hours: int | None
    employee_subtype_id: str | None
    job_data_reason: Enum | None
    pathway_id: str | None
    def __init__(self, d=None) -> None: ...
    @staticmethod
    def builder() -> JobDataBuilder: ...

class JobDataBuilder:
    def __init__(self) -> None: ...
    def job_data_id(self, job_data_id: str) -> JobDataBuilder: ...
    def version_id(self, version_id: str) -> JobDataBuilder: ...
    def employee_type_id(self, employee_type_id: str) -> JobDataBuilder: ...
    def working_hours_type_id(self, working_hours_type_id: str) -> JobDataBuilder: ...
    def work_location_id(self, work_location_id: str) -> JobDataBuilder: ...
    def department_id(self, department_id: str) -> JobDataBuilder: ...
    def position_id(self, position_id: str) -> JobDataBuilder: ...
    def job_id(self, job_id: str) -> JobDataBuilder: ...
    def job_level_id(self, job_level_id: str) -> JobDataBuilder: ...
    def job_grade_id(self, job_grade_id: str) -> JobDataBuilder: ...
    def job_family_id(self, job_family_id: str) -> JobDataBuilder: ...
    def probation_start_date(self, probation_start_date: str) -> JobDataBuilder: ...
    def probation_end_date(self, probation_end_date: str) -> JobDataBuilder: ...
    def primary_job_data(self, primary_job_data: bool) -> JobDataBuilder: ...
    def employment_id(self, employment_id: str) -> JobDataBuilder: ...
    def effective_time(self, effective_time: str) -> JobDataBuilder: ...
    def expiration_time(self, expiration_time: str) -> JobDataBuilder: ...
    def assignment_start_reason(self, assignment_start_reason: Enum) -> JobDataBuilder: ...
    def probation_expected_end_date(self, probation_expected_end_date: str) -> JobDataBuilder: ...
    def probation_outcome(self, probation_outcome: Enum) -> JobDataBuilder: ...
    def direct_manager(self, direct_manager: BasicJobData) -> JobDataBuilder: ...
    def dotted_line_managers(self, dotted_line_managers: list[BasicJobData]) -> JobDataBuilder: ...
    def second_direct_manager(self, second_direct_manager: BasicJobData) -> JobDataBuilder: ...
    def cost_center_rates(self, cost_center_rates: list[JobDataCostCenter]) -> JobDataBuilder: ...
    def work_shift(self, work_shift: Enum) -> JobDataBuilder: ...
    def compensation_type(self, compensation_type: Enum) -> JobDataBuilder: ...
    def service_company(self, service_company: str) -> JobDataBuilder: ...
    def custom_fields(self, custom_fields: list[CustomFieldData]) -> JobDataBuilder: ...
    def created_at(self, created_at: str) -> JobDataBuilder: ...
    def weekly_working_hours_v2(self, weekly_working_hours_v2: float) -> JobDataBuilder: ...
    def weekly_working_hours(self, weekly_working_hours: int) -> JobDataBuilder: ...
    def employee_subtype_id(self, employee_subtype_id: str) -> JobDataBuilder: ...
    def job_data_reason(self, job_data_reason: Enum) -> JobDataBuilder: ...
    def pathway_id(self, pathway_id: str) -> JobDataBuilder: ...
    def build(self) -> JobData: ...
