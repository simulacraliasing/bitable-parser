from .enum import Enum as Enum
from .i18n import I18n as I18n
from lark_oapi.core.construct import init as init

class InternationalAssignment:
    id: str | None
    assignment_city_id: str | None
    assignment_company_id: str | None
    assignment_country_id: str | None
    assignment_reason: I18n | None
    effective_time: str | None
    start_assignment_process_id: str | None
    end_assignment_process_id: str | None
    expiration_time: str | None
    international_assignment_status: Enum | None
    international_assignment_type: Enum | None
    def __init__(self, d=None) -> None: ...
    @staticmethod
    def builder() -> InternationalAssignmentBuilder: ...

class InternationalAssignmentBuilder:
    def __init__(self) -> None: ...
    def id(self, id: str) -> InternationalAssignmentBuilder: ...
    def assignment_city_id(self, assignment_city_id: str) -> InternationalAssignmentBuilder: ...
    def assignment_company_id(self, assignment_company_id: str) -> InternationalAssignmentBuilder: ...
    def assignment_country_id(self, assignment_country_id: str) -> InternationalAssignmentBuilder: ...
    def assignment_reason(self, assignment_reason: I18n) -> InternationalAssignmentBuilder: ...
    def effective_time(self, effective_time: str) -> InternationalAssignmentBuilder: ...
    def start_assignment_process_id(self, start_assignment_process_id: str) -> InternationalAssignmentBuilder: ...
    def end_assignment_process_id(self, end_assignment_process_id: str) -> InternationalAssignmentBuilder: ...
    def expiration_time(self, expiration_time: str) -> InternationalAssignmentBuilder: ...
    def international_assignment_status(self, international_assignment_status: Enum) -> InternationalAssignmentBuilder: ...
    def international_assignment_type(self, international_assignment_type: Enum) -> InternationalAssignmentBuilder: ...
    def build(self) -> InternationalAssignment: ...
