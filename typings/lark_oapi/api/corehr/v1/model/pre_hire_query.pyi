from .email import Email as Email
from .enum import Enum as Enum
from .object_field_data import ObjectFieldData as ObjectFieldData
from .support_cost_center_item import SupportCostCenterItem as SupportCostCenterItem
from lark_oapi.core.construct import init as init

class PreHireQuery:
    ats_application_id: str | None
    id: str | None
    hire_date: str | None
    employee_type: Enum | None
    worker_id: str | None
    employee_type_id: str | None
    person_id: str | None
    custom_fields: list[ObjectFieldData] | None
    onboarding_status: Enum | None
    cost_center_rate: list[SupportCostCenterItem] | None
    work_email_list: list[Email] | None
    department_id: str | None
    def __init__(self, d=None) -> None: ...
    @staticmethod
    def builder() -> PreHireQueryBuilder: ...

class PreHireQueryBuilder:
    def __init__(self) -> None: ...
    def ats_application_id(self, ats_application_id: str) -> PreHireQueryBuilder: ...
    def id(self, id: str) -> PreHireQueryBuilder: ...
    def hire_date(self, hire_date: str) -> PreHireQueryBuilder: ...
    def employee_type(self, employee_type: Enum) -> PreHireQueryBuilder: ...
    def worker_id(self, worker_id: str) -> PreHireQueryBuilder: ...
    def employee_type_id(self, employee_type_id: str) -> PreHireQueryBuilder: ...
    def person_id(self, person_id: str) -> PreHireQueryBuilder: ...
    def custom_fields(self, custom_fields: list[ObjectFieldData]) -> PreHireQueryBuilder: ...
    def onboarding_status(self, onboarding_status: Enum) -> PreHireQueryBuilder: ...
    def cost_center_rate(self, cost_center_rate: list[SupportCostCenterItem]) -> PreHireQueryBuilder: ...
    def work_email_list(self, work_email_list: list[Email]) -> PreHireQueryBuilder: ...
    def department_id(self, department_id: str) -> PreHireQueryBuilder: ...
    def build(self) -> PreHireQuery: ...
