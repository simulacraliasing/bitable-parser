from .address import Address as Address
from .bank_account import BankAccount as BankAccount
from .dependent import Dependent as Dependent
from .education import Education as Education
from .email import Email as Email
from .emergency_contact import EmergencyContact as EmergencyContact
from .enum import Enum as Enum
from .national_id import NationalId as NationalId
from .object_field_data import ObjectFieldData as ObjectFieldData
from .person_name import PersonName as PersonName
from .personal_profile import PersonalProfile as PersonalProfile
from .phone import Phone as Phone
from .work_experience import WorkExperience as WorkExperience
from lark_oapi.core.construct import init as init

class Person:
    phone_number: str | None
    legal_name: str | None
    preferred_name: str | None
    id: str | None
    name_list: list[PersonName] | None
    gender: Enum | None
    date_of_birth: str | None
    nationality_id: str | None
    nationality_id_v2: str | None
    race: Enum | None
    marital_status: Enum | None
    phone_list: list[Phone] | None
    address_list: list[Address] | None
    email_list: list[Email] | None
    work_experience_list: list[WorkExperience] | None
    education_list: list[Education] | None
    bank_account_list: list[BankAccount] | None
    national_id_list: list[NationalId] | None
    dependent_list: list[Dependent] | None
    emergency_contact_list: list[EmergencyContact] | None
    date_entered_workforce: str | None
    profile_image_id: str | None
    custom_fields: list[ObjectFieldData] | None
    email_address: str | None
    resident_tax_id_list: list[str] | None
    age: int | None
    highest_level_of_education: Education | None
    highest_degree_of_education: Education | None
    personal_profile: list[PersonalProfile] | None
    def __init__(self, d=None) -> None: ...
    @staticmethod
    def builder() -> PersonBuilder: ...

class PersonBuilder:
    def __init__(self) -> None: ...
    def phone_number(self, phone_number: str) -> PersonBuilder: ...
    def legal_name(self, legal_name: str) -> PersonBuilder: ...
    def preferred_name(self, preferred_name: str) -> PersonBuilder: ...
    def id(self, id: str) -> PersonBuilder: ...
    def name_list(self, name_list: list[PersonName]) -> PersonBuilder: ...
    def gender(self, gender: Enum) -> PersonBuilder: ...
    def date_of_birth(self, date_of_birth: str) -> PersonBuilder: ...
    def nationality_id(self, nationality_id: str) -> PersonBuilder: ...
    def nationality_id_v2(self, nationality_id_v2: str) -> PersonBuilder: ...
    def race(self, race: Enum) -> PersonBuilder: ...
    def marital_status(self, marital_status: Enum) -> PersonBuilder: ...
    def phone_list(self, phone_list: list[Phone]) -> PersonBuilder: ...
    def address_list(self, address_list: list[Address]) -> PersonBuilder: ...
    def email_list(self, email_list: list[Email]) -> PersonBuilder: ...
    def work_experience_list(self, work_experience_list: list[WorkExperience]) -> PersonBuilder: ...
    def education_list(self, education_list: list[Education]) -> PersonBuilder: ...
    def bank_account_list(self, bank_account_list: list[BankAccount]) -> PersonBuilder: ...
    def national_id_list(self, national_id_list: list[NationalId]) -> PersonBuilder: ...
    def dependent_list(self, dependent_list: list[Dependent]) -> PersonBuilder: ...
    def emergency_contact_list(self, emergency_contact_list: list[EmergencyContact]) -> PersonBuilder: ...
    def date_entered_workforce(self, date_entered_workforce: str) -> PersonBuilder: ...
    def profile_image_id(self, profile_image_id: str) -> PersonBuilder: ...
    def custom_fields(self, custom_fields: list[ObjectFieldData]) -> PersonBuilder: ...
    def email_address(self, email_address: str) -> PersonBuilder: ...
    def resident_tax_id_list(self, resident_tax_id_list: list[str]) -> PersonBuilder: ...
    def age(self, age: int) -> PersonBuilder: ...
    def highest_level_of_education(self, highest_level_of_education: Education) -> PersonBuilder: ...
    def highest_degree_of_education(self, highest_degree_of_education: Education) -> PersonBuilder: ...
    def personal_profile(self, personal_profile: list[PersonalProfile]) -> PersonBuilder: ...
    def build(self) -> Person: ...
