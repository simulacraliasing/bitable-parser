from .email import Email as Email
from .enum import Enum as Enum
from .job_data_cost_center import JobDataCostCenter as JobDataCostCenter
from .object_field_data import ObjectFieldData as ObjectFieldData
from lark_oapi.core.construct import init as init

class Employment:
    prehire_id: str | None
    employee_type_id: str | None
    tenure: str | None
    department_id: str | None
    job_level_id: str | None
    work_location_id: str | None
    job_family_id: str | None
    job_id: str | None
    company_id: str | None
    working_hours_type_id: str | None
    id: str | None
    seniority_date: str | None
    employee_number: str | None
    effective_time: str | None
    expiration_time: str | None
    employment_type: Enum | None
    person_id: str | None
    probation_period: int | None
    on_probation: str | None
    probation_end_date: str | None
    primary_employment: bool | None
    condition_worker: bool | None
    employment_status: Enum | None
    custom_fields: list[ObjectFieldData] | None
    work_email_list: list[Email] | None
    email_address: str | None
    reason_for_offboarding: Enum | None
    cost_center_list: list[JobDataCostCenter] | None
    ats_application_id: str | None
    rehire: Enum | None
    rehire_employment_id: str | None
    service_company: str | None
    compensation_type: Enum | None
    work_shift: Enum | None
    def __init__(self, d=None) -> None: ...
    @staticmethod
    def builder() -> EmploymentBuilder: ...

class EmploymentBuilder:
    def __init__(self) -> None: ...
    def prehire_id(self, prehire_id: str) -> EmploymentBuilder: ...
    def employee_type_id(self, employee_type_id: str) -> EmploymentBuilder: ...
    def tenure(self, tenure: str) -> EmploymentBuilder: ...
    def department_id(self, department_id: str) -> EmploymentBuilder: ...
    def job_level_id(self, job_level_id: str) -> EmploymentBuilder: ...
    def work_location_id(self, work_location_id: str) -> EmploymentBuilder: ...
    def job_family_id(self, job_family_id: str) -> EmploymentBuilder: ...
    def job_id(self, job_id: str) -> EmploymentBuilder: ...
    def company_id(self, company_id: str) -> EmploymentBuilder: ...
    def working_hours_type_id(self, working_hours_type_id: str) -> EmploymentBuilder: ...
    def id(self, id: str) -> EmploymentBuilder: ...
    def seniority_date(self, seniority_date: str) -> EmploymentBuilder: ...
    def employee_number(self, employee_number: str) -> EmploymentBuilder: ...
    def effective_time(self, effective_time: str) -> EmploymentBuilder: ...
    def expiration_time(self, expiration_time: str) -> EmploymentBuilder: ...
    def employment_type(self, employment_type: Enum) -> EmploymentBuilder: ...
    def person_id(self, person_id: str) -> EmploymentBuilder: ...
    def probation_period(self, probation_period: int) -> EmploymentBuilder: ...
    def on_probation(self, on_probation: str) -> EmploymentBuilder: ...
    def probation_end_date(self, probation_end_date: str) -> EmploymentBuilder: ...
    def primary_employment(self, primary_employment: bool) -> EmploymentBuilder: ...
    def condition_worker(self, condition_worker: bool) -> EmploymentBuilder: ...
    def employment_status(self, employment_status: Enum) -> EmploymentBuilder: ...
    def custom_fields(self, custom_fields: list[ObjectFieldData]) -> EmploymentBuilder: ...
    def work_email_list(self, work_email_list: list[Email]) -> EmploymentBuilder: ...
    def email_address(self, email_address: str) -> EmploymentBuilder: ...
    def reason_for_offboarding(self, reason_for_offboarding: Enum) -> EmploymentBuilder: ...
    def cost_center_list(self, cost_center_list: list[JobDataCostCenter]) -> EmploymentBuilder: ...
    def ats_application_id(self, ats_application_id: str) -> EmploymentBuilder: ...
    def rehire(self, rehire: Enum) -> EmploymentBuilder: ...
    def rehire_employment_id(self, rehire_employment_id: str) -> EmploymentBuilder: ...
    def service_company(self, service_company: str) -> EmploymentBuilder: ...
    def compensation_type(self, compensation_type: Enum) -> EmploymentBuilder: ...
    def work_shift(self, work_shift: Enum) -> EmploymentBuilder: ...
    def build(self) -> Employment: ...
