from lark_oapi.core.enum import AccessTokenType as AccessTokenType, HttpMethod as HttpMethod
from lark_oapi.core.model import BaseRequest as BaseRequest

class MatchCompensationStandardRequest(BaseRequest):
    user_id_type: str | None
    department_id_type: str | None
    employment_id: str | None
    reference_object_api: str | None
    reference_object_id: str | None
    department_id: str | None
    work_location_id: str | None
    company_id: str | None
    job_family_id: str | None
    job_id: str | None
    job_level_id: str | None
    employee_type_id: str | None
    recruitment_type: str | None
    cpst_change_reason_id: str | None
    cpst_plan_id: str | None
    cpst_salary_level_id: str | None
    effective_time: str | None
    def __init__(self) -> None: ...
    @staticmethod
    def builder() -> MatchCompensationStandardRequestBuilder: ...

class MatchCompensationStandardRequestBuilder:
    def __init__(self) -> None: ...
    def user_id_type(self, user_id_type: str) -> MatchCompensationStandardRequestBuilder: ...
    def department_id_type(self, department_id_type: str) -> MatchCompensationStandardRequestBuilder: ...
    def employment_id(self, employment_id: str) -> MatchCompensationStandardRequestBuilder: ...
    def reference_object_api(self, reference_object_api: str) -> MatchCompensationStandardRequestBuilder: ...
    def reference_object_id(self, reference_object_id: str) -> MatchCompensationStandardRequestBuilder: ...
    def department_id(self, department_id: str) -> MatchCompensationStandardRequestBuilder: ...
    def work_location_id(self, work_location_id: str) -> MatchCompensationStandardRequestBuilder: ...
    def company_id(self, company_id: str) -> MatchCompensationStandardRequestBuilder: ...
    def job_family_id(self, job_family_id: str) -> MatchCompensationStandardRequestBuilder: ...
    def job_id(self, job_id: str) -> MatchCompensationStandardRequestBuilder: ...
    def job_level_id(self, job_level_id: str) -> MatchCompensationStandardRequestBuilder: ...
    def employee_type_id(self, employee_type_id: str) -> MatchCompensationStandardRequestBuilder: ...
    def recruitment_type(self, recruitment_type: str) -> MatchCompensationStandardRequestBuilder: ...
    def cpst_change_reason_id(self, cpst_change_reason_id: str) -> MatchCompensationStandardRequestBuilder: ...
    def cpst_plan_id(self, cpst_plan_id: str) -> MatchCompensationStandardRequestBuilder: ...
    def cpst_salary_level_id(self, cpst_salary_level_id: str) -> MatchCompensationStandardRequestBuilder: ...
    def effective_time(self, effective_time: str) -> MatchCompensationStandardRequestBuilder: ...
    def build(self) -> MatchCompensationStandardRequest: ...
