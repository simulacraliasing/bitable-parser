from .enum import Enum as Enum
from .object_field_data import ObjectFieldData as ObjectFieldData
from lark_oapi.core.construct import init as init

class Contract:
    id: str | None
    effective_time: str | None
    expiration_time: str | None
    employment_id: str | None
    contract_type: Enum | None
    first_party_company_id: str | None
    person_id: str | None
    custom_fields: list[ObjectFieldData] | None
    duration_type: Enum | None
    contract_end_date: str | None
    contract_number: str | None
    signing_type: Enum | None
    contract_status: Enum | None
    renewal_status: Enum | None
    signing_times: int | None
    def __init__(self, d=None) -> None: ...
    @staticmethod
    def builder() -> ContractBuilder: ...

class ContractBuilder:
    def __init__(self) -> None: ...
    def id(self, id: str) -> ContractBuilder: ...
    def effective_time(self, effective_time: str) -> ContractBuilder: ...
    def expiration_time(self, expiration_time: str) -> ContractBuilder: ...
    def employment_id(self, employment_id: str) -> ContractBuilder: ...
    def contract_type(self, contract_type: Enum) -> ContractBuilder: ...
    def first_party_company_id(self, first_party_company_id: str) -> ContractBuilder: ...
    def person_id(self, person_id: str) -> ContractBuilder: ...
    def custom_fields(self, custom_fields: list[ObjectFieldData]) -> ContractBuilder: ...
    def duration_type(self, duration_type: Enum) -> ContractBuilder: ...
    def contract_end_date(self, contract_end_date: str) -> ContractBuilder: ...
    def contract_number(self, contract_number: str) -> ContractBuilder: ...
    def signing_type(self, signing_type: Enum) -> ContractBuilder: ...
    def contract_status(self, contract_status: Enum) -> ContractBuilder: ...
    def renewal_status(self, renewal_status: Enum) -> ContractBuilder: ...
    def signing_times(self, signing_times: int) -> ContractBuilder: ...
    def build(self) -> Contract: ...
