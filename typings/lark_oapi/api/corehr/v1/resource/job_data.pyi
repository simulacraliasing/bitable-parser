from ..model.create_job_data_request import CreateJobDataRequest as CreateJobDataRequest
from ..model.create_job_data_response import CreateJobDataResponse as CreateJobDataResponse
from ..model.delete_job_data_request import DeleteJobDataRequest as DeleteJobDataRequest
from ..model.delete_job_data_response import DeleteJobDataResponse as DeleteJobDataResponse
from ..model.get_job_data_request import GetJobDataRequest as GetJobDataRequest
from ..model.get_job_data_response import GetJobDataResponse as GetJobDataResponse
from ..model.list_job_data_request import ListJobDataRequest as ListJobDataRequest
from ..model.list_job_data_response import ListJobDataResponse as ListJobDataResponse
from ..model.patch_job_data_request import PatchJobDataRequest as PatchJobDataRequest
from ..model.patch_job_data_response import PatchJobDataResponse as PatchJobDataResponse
from lark_oapi.core import JSON as JSON
from lark_oapi.core.const import APPLICATION_JSON as APPLICATION_JSON, CONTENT_TYPE as CONTENT_TYPE, UTF_8 as UTF_8
from lark_oapi.core.http import Transport as Transport
from lark_oapi.core.model import Config as Config, RawResponse as RawResponse, RequestOption as RequestOption
from lark_oapi.core.token import verify as verify
from lark_oapi.core.utils import Files as Files
from requests_toolbelt import MultipartEncoder as MultipartEncoder

class JobData:
    config: Config
    def __init__(self, config: Config) -> None: ...
    def create(self, request: CreateJobDataRequest, option: RequestOption | None = None) -> CreateJobDataResponse: ...
    async def acreate(self, request: CreateJobDataRequest, option: RequestOption | None = None) -> CreateJobDataResponse: ...
    def delete(self, request: DeleteJobDataRequest, option: RequestOption | None = None) -> DeleteJobDataResponse: ...
    async def adelete(self, request: DeleteJobDataRequest, option: RequestOption | None = None) -> DeleteJobDataResponse: ...
    def get(self, request: GetJobDataRequest, option: RequestOption | None = None) -> GetJobDataResponse: ...
    async def aget(self, request: GetJobDataRequest, option: RequestOption | None = None) -> GetJobDataResponse: ...
    def list(self, request: ListJobDataRequest, option: RequestOption | None = None) -> ListJobDataResponse: ...
    async def alist(self, request: ListJobDataRequest, option: RequestOption | None = None) -> ListJobDataResponse: ...
    def patch(self, request: PatchJobDataRequest, option: RequestOption | None = None) -> PatchJobDataResponse: ...
    async def apatch(self, request: PatchJobDataRequest, option: RequestOption | None = None) -> PatchJobDataResponse: ...
