from ..model.create_company_request import CreateCompanyRequest as CreateCompanyRequest
from ..model.create_company_response import CreateCompanyResponse as CreateCompanyResponse
from ..model.delete_company_request import DeleteCompanyRequest as DeleteCompanyRequest
from ..model.delete_company_response import DeleteCompanyResponse as DeleteCompanyResponse
from ..model.get_company_request import GetCompanyRequest as GetCompanyRequest
from ..model.get_company_response import GetCompanyResponse as GetCompanyResponse
from ..model.list_company_request import ListCompanyRequest as ListCompanyRequest
from ..model.list_company_response import ListCompanyResponse as ListCompanyResponse
from ..model.patch_company_request import PatchCompanyRequest as PatchCompanyRequest
from ..model.patch_company_response import PatchCompanyResponse as PatchCompanyResponse
from lark_oapi.core import JSON as JSON
from lark_oapi.core.const import APPLICATION_JSON as APPLICATION_JSON, CONTENT_TYPE as CONTENT_TYPE, UTF_8 as UTF_8
from lark_oapi.core.http import Transport as Transport
from lark_oapi.core.model import Config as Config, RawResponse as RawResponse, RequestOption as RequestOption
from lark_oapi.core.token import verify as verify
from lark_oapi.core.utils import Files as Files
from requests_toolbelt import MultipartEncoder as MultipartEncoder

class Company:
    config: Config
    def __init__(self, config: Config) -> None: ...
    def create(self, request: CreateCompanyRequest, option: RequestOption | None = None) -> CreateCompanyResponse: ...
    async def acreate(self, request: CreateCompanyRequest, option: RequestOption | None = None) -> CreateCompanyResponse: ...
    def delete(self, request: DeleteCompanyRequest, option: RequestOption | None = None) -> DeleteCompanyResponse: ...
    async def adelete(self, request: DeleteCompanyRequest, option: RequestOption | None = None) -> DeleteCompanyResponse: ...
    def get(self, request: GetCompanyRequest, option: RequestOption | None = None) -> GetCompanyResponse: ...
    async def aget(self, request: GetCompanyRequest, option: RequestOption | None = None) -> GetCompanyResponse: ...
    def list(self, request: ListCompanyRequest, option: RequestOption | None = None) -> ListCompanyResponse: ...
    async def alist(self, request: ListCompanyRequest, option: RequestOption | None = None) -> ListCompanyResponse: ...
    def patch(self, request: PatchCompanyRequest, option: RequestOption | None = None) -> PatchCompanyResponse: ...
    async def apatch(self, request: PatchCompanyRequest, option: RequestOption | None = None) -> PatchCompanyResponse: ...
