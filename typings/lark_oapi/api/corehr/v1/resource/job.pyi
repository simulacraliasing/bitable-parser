from ..model.create_job_request import CreateJobRequest as CreateJobRequest
from ..model.create_job_response import CreateJobResponse as CreateJobResponse
from ..model.delete_job_request import DeleteJobRequest as DeleteJobRequest
from ..model.delete_job_response import DeleteJobResponse as DeleteJobResponse
from ..model.get_job_request import GetJobRequest as GetJobRequest
from ..model.get_job_response import GetJobResponse as GetJobResponse
from ..model.list_job_request import ListJobRequest as ListJobRequest
from ..model.list_job_response import ListJobResponse as ListJobResponse
from ..model.patch_job_request import PatchJobRequest as PatchJobRequest
from ..model.patch_job_response import PatchJobResponse as PatchJobResponse
from lark_oapi.core import JSON as JSON
from lark_oapi.core.const import APPLICATION_JSON as APPLICATION_JSON, CONTENT_TYPE as CONTENT_TYPE, UTF_8 as UTF_8
from lark_oapi.core.http import Transport as Transport
from lark_oapi.core.model import Config as Config, RawResponse as RawResponse, RequestOption as RequestOption
from lark_oapi.core.token import verify as verify
from lark_oapi.core.utils import Files as Files
from requests_toolbelt import MultipartEncoder as MultipartEncoder

class Job:
    config: Config
    def __init__(self, config: Config) -> None: ...
    def create(self, request: CreateJobRequest, option: RequestOption | None = None) -> CreateJobResponse: ...
    async def acreate(self, request: CreateJobRequest, option: RequestOption | None = None) -> CreateJobResponse: ...
    def delete(self, request: DeleteJobRequest, option: RequestOption | None = None) -> DeleteJobResponse: ...
    async def adelete(self, request: DeleteJobRequest, option: RequestOption | None = None) -> DeleteJobResponse: ...
    def get(self, request: GetJobRequest, option: RequestOption | None = None) -> GetJobResponse: ...
    async def aget(self, request: GetJobRequest, option: RequestOption | None = None) -> GetJobResponse: ...
    def list(self, request: ListJobRequest, option: RequestOption | None = None) -> ListJobResponse: ...
    async def alist(self, request: ListJobRequest, option: RequestOption | None = None) -> ListJobResponse: ...
    def patch(self, request: PatchJobRequest, option: RequestOption | None = None) -> PatchJobResponse: ...
    async def apatch(self, request: PatchJobRequest, option: RequestOption | None = None) -> PatchJobResponse: ...
