from ..model.query_offboarding_request import QueryOffboardingRequest as QueryOffboardingRequest
from ..model.query_offboarding_response import QueryOffboardingResponse as QueryOffboardingResponse
from ..model.search_offboarding_request import SearchOffboardingRequest as SearchOffboardingRequest
from ..model.search_offboarding_response import SearchOffboardingResponse as SearchOffboardingResponse
from ..model.submit_offboarding_request import SubmitOffboardingRequest as SubmitOffboardingRequest
from ..model.submit_offboarding_response import SubmitOffboardingResponse as SubmitOffboardingResponse
from lark_oapi.core import JSON as JSON
from lark_oapi.core.const import APPLICATION_JSON as APPLICATION_JSON, CONTENT_TYPE as CONTENT_TYPE, UTF_8 as UTF_8
from lark_oapi.core.http import Transport as Transport
from lark_oapi.core.model import Config as Config, RawResponse as RawResponse, RequestOption as RequestOption
from lark_oapi.core.token import verify as verify
from lark_oapi.core.utils import Files as Files
from requests_toolbelt import MultipartEncoder as MultipartEncoder

class Offboarding:
    config: Config
    def __init__(self, config: Config) -> None: ...
    def query(self, request: QueryOffboardingRequest, option: RequestOption | None = None) -> QueryOffboardingResponse: ...
    async def aquery(self, request: QueryOffboardingRequest, option: RequestOption | None = None) -> QueryOffboardingResponse: ...
    def search(self, request: SearchOffboardingRequest, option: RequestOption | None = None) -> SearchOffboardingResponse: ...
    async def asearch(self, request: SearchOffboardingRequest, option: RequestOption | None = None) -> SearchOffboardingResponse: ...
    def submit(self, request: SubmitOffboardingRequest, option: RequestOption | None = None) -> SubmitOffboardingResponse: ...
    async def asubmit(self, request: SubmitOffboardingRequest, option: RequestOption | None = None) -> SubmitOffboardingResponse: ...
