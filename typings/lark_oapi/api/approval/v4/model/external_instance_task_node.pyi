from .action_config import ActionConfig as ActionConfig
from .external_instance_link import ExternalInstanceLink as ExternalInstanceLink
from lark_oapi.core.construct import init as init

class ExternalInstanceTaskNode:
    task_id: str | None
    user_id: str | None
    open_id: str | None
    title: str | None
    links: ExternalInstanceLink | None
    status: str | None
    extra: str | None
    create_time: int | None
    end_time: int | None
    update_time: int | None
    action_context: str | None
    action_configs: list[ActionConfig] | None
    display_method: str | None
    exclude_statistics: bool | None
    node_id: str | None
    node_name: str | None
    generate_type: str | None
    def __init__(self, d=None) -> None: ...
    @staticmethod
    def builder() -> ExternalInstanceTaskNodeBuilder: ...

class ExternalInstanceTaskNodeBuilder:
    def __init__(self) -> None: ...
    def task_id(self, task_id: str) -> ExternalInstanceTaskNodeBuilder: ...
    def user_id(self, user_id: str) -> ExternalInstanceTaskNodeBuilder: ...
    def open_id(self, open_id: str) -> ExternalInstanceTaskNodeBuilder: ...
    def title(self, title: str) -> ExternalInstanceTaskNodeBuilder: ...
    def links(self, links: ExternalInstanceLink) -> ExternalInstanceTaskNodeBuilder: ...
    def status(self, status: str) -> ExternalInstanceTaskNodeBuilder: ...
    def extra(self, extra: str) -> ExternalInstanceTaskNodeBuilder: ...
    def create_time(self, create_time: int) -> ExternalInstanceTaskNodeBuilder: ...
    def end_time(self, end_time: int) -> ExternalInstanceTaskNodeBuilder: ...
    def update_time(self, update_time: int) -> ExternalInstanceTaskNodeBuilder: ...
    def action_context(self, action_context: str) -> ExternalInstanceTaskNodeBuilder: ...
    def action_configs(self, action_configs: list[ActionConfig]) -> ExternalInstanceTaskNodeBuilder: ...
    def display_method(self, display_method: str) -> ExternalInstanceTaskNodeBuilder: ...
    def exclude_statistics(self, exclude_statistics: bool) -> ExternalInstanceTaskNodeBuilder: ...
    def node_id(self, node_id: str) -> ExternalInstanceTaskNodeBuilder: ...
    def node_name(self, node_name: str) -> ExternalInstanceTaskNodeBuilder: ...
    def generate_type(self, generate_type: str) -> ExternalInstanceTaskNodeBuilder: ...
    def build(self) -> ExternalInstanceTaskNode: ...
