from .task_urls import TaskUrls as TaskUrls
from lark_oapi.core.construct import init as init

class Task:
    topic: int | None
    user_id: int | None
    title: str | None
    urls: TaskUrls | None
    process_external_id: str | None
    task_external_id: str | None
    status: str | None
    process_status: str | None
    definition_code: str | None
    initiators: list[str] | None
    initiator_names: list[str] | None
    task_id: int | None
    process_id: int | None
    process_code: str | None
    definition_group_id: int | None
    definition_group_name: str | None
    definition_id: int | None
    definition_name: str | None
    def __init__(self, d=None) -> None: ...
    @staticmethod
    def builder() -> TaskBuilder: ...

class TaskBuilder:
    def __init__(self) -> None: ...
    def topic(self, topic: int) -> TaskBuilder: ...
    def user_id(self, user_id: int) -> TaskBuilder: ...
    def title(self, title: str) -> TaskBuilder: ...
    def urls(self, urls: TaskUrls) -> TaskBuilder: ...
    def process_external_id(self, process_external_id: str) -> TaskBuilder: ...
    def task_external_id(self, task_external_id: str) -> TaskBuilder: ...
    def status(self, status: str) -> TaskBuilder: ...
    def process_status(self, process_status: str) -> TaskBuilder: ...
    def definition_code(self, definition_code: str) -> TaskBuilder: ...
    def initiators(self, initiators: list[str]) -> TaskBuilder: ...
    def initiator_names(self, initiator_names: list[str]) -> TaskBuilder: ...
    def task_id(self, task_id: int) -> TaskBuilder: ...
    def process_id(self, process_id: int) -> TaskBuilder: ...
    def process_code(self, process_code: str) -> TaskBuilder: ...
    def definition_group_id(self, definition_group_id: int) -> TaskBuilder: ...
    def definition_group_name(self, definition_group_name: str) -> TaskBuilder: ...
    def definition_id(self, definition_id: int) -> TaskBuilder: ...
    def definition_name(self, definition_name: str) -> TaskBuilder: ...
    def build(self) -> Task: ...
