from _typeshed import Incomplete
from lark_oapi.core.cache import ICache as ICache

class LocalCache(ICache):
    cache: dict[str, LocalCache.ValueWrap]
    def __init__(self) -> None: ...
    def get(self, key: str) -> str | None: ...
    def set(self, key: str, value: str, expire: int) -> None: ...
    @staticmethod
    def instance() -> LocalCache: ...
    class ValueWrap:
        value: Incomplete
        expire: Incomplete
        def __init__(self, value: str, expire: int) -> None: ...
