from typing import *
from lark_oapi.core import AccessTokenType as AccessTokenType, HttpMethod as HttpMethod
from typing import Any

class BaseRequest:
    http_method: Optional[HttpMethod]
    uri: Optional[str]
    token_types: Set[AccessTokenType]
    paths: Dict[str, str]
    queries: List[Tuple[str, str]]
    headers: Dict[str, str]
    body: Any
    files: Optional[Dict]
    def __init__(self) -> None: ...
    def add_query(self, k: str, v: Any) -> None: ...
    @staticmethod
    def builder() -> BaseRequestBuilder: ...

class BaseRequestBuilder:
    def __init__(self) -> None: ...
    def http_method(self, http_method: HttpMethod) -> BaseRequestBuilder: ...
    def uri(self, uri: str) -> BaseRequestBuilder: ...
    def token_types(self, token_types: Set[AccessTokenType]) -> BaseRequestBuilder: ...
    def paths(self, paths: Dict[str, str]) -> BaseRequestBuilder: ...
    def queries(self, queries: List[Tuple[str, str]]) -> BaseRequestBuilder: ...
    def headers(self, headers: Dict[str, str]) -> BaseRequestBuilder: ...
    def body(self, body: Any) -> BaseRequestBuilder: ...
    def build(self) -> BaseRequest: ...
