from _typeshed import Incomplete

__all__ = ['MessageToString', 'Parse', 'PrintMessage', 'PrintField', 'PrintFieldValue', 'Merge', 'MessageToBytes']

class Error(Exception): ...

class ParseError(Error):
    def __init__(self, message=None, line=None, column=None) -> None: ...
    def GetLine(self): ...
    def GetColumn(self): ...

class TextWriter:
    def __init__(self, as_utf8) -> None: ...
    def write(self, val): ...
    def close(self): ...
    def getvalue(self): ...

def MessageToString(message, as_utf8: bool = False, as_one_line: bool = False, use_short_repeated_primitives: bool = False, pointy_brackets: bool = False, use_index_order: bool = False, float_format=None, double_format=None, use_field_number: bool = False, descriptor_pool=None, indent: int = 0, message_formatter=None, print_unknown_fields: bool = False, force_colon: bool = False) -> str: ...
def MessageToBytes(message, **kwargs) -> bytes: ...
def PrintMessage(message, out, indent: int = 0, as_utf8: bool = False, as_one_line: bool = False, use_short_repeated_primitives: bool = False, pointy_brackets: bool = False, use_index_order: bool = False, float_format=None, double_format=None, use_field_number: bool = False, descriptor_pool=None, message_formatter=None, print_unknown_fields: bool = False, force_colon: bool = False) -> None: ...
def PrintField(field, value, out, indent: int = 0, as_utf8: bool = False, as_one_line: bool = False, use_short_repeated_primitives: bool = False, pointy_brackets: bool = False, use_index_order: bool = False, float_format=None, double_format=None, message_formatter=None, print_unknown_fields: bool = False, force_colon: bool = False) -> None: ...
def PrintFieldValue(field, value, out, indent: int = 0, as_utf8: bool = False, as_one_line: bool = False, use_short_repeated_primitives: bool = False, pointy_brackets: bool = False, use_index_order: bool = False, float_format=None, double_format=None, message_formatter=None, print_unknown_fields: bool = False, force_colon: bool = False) -> None: ...

class _Printer:
    out: Incomplete
    indent: Incomplete
    as_utf8: Incomplete
    as_one_line: Incomplete
    use_short_repeated_primitives: Incomplete
    pointy_brackets: Incomplete
    use_index_order: Incomplete
    float_format: Incomplete
    double_format: Incomplete
    use_field_number: Incomplete
    descriptor_pool: Incomplete
    message_formatter: Incomplete
    print_unknown_fields: Incomplete
    force_colon: Incomplete
    def __init__(self, out, indent: int = 0, as_utf8: bool = False, as_one_line: bool = False, use_short_repeated_primitives: bool = False, pointy_brackets: bool = False, use_index_order: bool = False, float_format=None, double_format=None, use_field_number: bool = False, descriptor_pool=None, message_formatter=None, print_unknown_fields: bool = False, force_colon: bool = False) -> None: ...
    def PrintMessage(self, message): ...
    def PrintField(self, field, value) -> None: ...
    def PrintFieldValue(self, field, value) -> None: ...

def Parse(text, message, allow_unknown_extension: bool = False, allow_field_number: bool = False, descriptor_pool=None, allow_unknown_field: bool = False): ...
def Merge(text, message, allow_unknown_extension: bool = False, allow_field_number: bool = False, descriptor_pool=None, allow_unknown_field: bool = False): ...

class _Parser:
    allow_unknown_extension: Incomplete
    allow_field_number: Incomplete
    descriptor_pool: Incomplete
    allow_unknown_field: Incomplete
    def __init__(self, allow_unknown_extension: bool = False, allow_field_number: bool = False, descriptor_pool=None, allow_unknown_field: bool = False) -> None: ...
    def ParseLines(self, lines, message): ...
    def MergeLines(self, lines, message): ...

class Tokenizer:
    token: str
    def __init__(self, lines, skip_comments: bool = True) -> None: ...
    def LookingAt(self, token): ...
    def AtEnd(self): ...
    def TryConsume(self, token): ...
    def Consume(self, token) -> None: ...
    def ConsumeComment(self): ...
    def ConsumeCommentOrTrailingComment(self): ...
    def TryConsumeIdentifier(self): ...
    def ConsumeIdentifier(self): ...
    def TryConsumeIdentifierOrNumber(self): ...
    def ConsumeIdentifierOrNumber(self): ...
    def TryConsumeInteger(self): ...
    def ConsumeInteger(self): ...
    def TryConsumeFloat(self): ...
    def ConsumeFloat(self): ...
    def ConsumeBool(self): ...
    def TryConsumeByteString(self): ...
    def ConsumeString(self): ...
    def ConsumeByteString(self): ...
    def ConsumeEnum(self, field): ...
    def ParseErrorPreviousToken(self, message): ...
    def ParseError(self, message): ...
    def NextToken(self) -> None: ...
