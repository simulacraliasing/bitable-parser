from _typeshed import Incomplete
from lark_oapi.ws.pb.google.protobuf import descriptor as descriptor, message as message

TAG_TYPE_BITS: int
TAG_TYPE_MASK: Incomplete
WIRETYPE_VARINT: int
WIRETYPE_FIXED64: int
WIRETYPE_LENGTH_DELIMITED: int
WIRETYPE_START_GROUP: int
WIRETYPE_END_GROUP: int
WIRETYPE_FIXED32: int
INT32_MAX: Incomplete
INT32_MIN: Incomplete
UINT32_MAX: Incomplete
INT64_MAX: Incomplete
INT64_MIN: Incomplete
UINT64_MAX: Incomplete
FORMAT_UINT32_LITTLE_ENDIAN: str
FORMAT_UINT64_LITTLE_ENDIAN: str
FORMAT_FLOAT_LITTLE_ENDIAN: str
FORMAT_DOUBLE_LITTLE_ENDIAN: str

def PackTag(field_number, wire_type): ...
def UnpackTag(tag): ...
def ZigZagEncode(value): ...
def ZigZagDecode(value): ...
def Int32ByteSize(field_number, int32): ...
def Int32ByteSizeNoTag(int32): ...
def Int64ByteSize(field_number, int64): ...
def UInt32ByteSize(field_number, uint32): ...
def UInt64ByteSize(field_number, uint64): ...
def SInt32ByteSize(field_number, int32): ...
def SInt64ByteSize(field_number, int64): ...
def Fixed32ByteSize(field_number, fixed32): ...
def Fixed64ByteSize(field_number, fixed64): ...
def SFixed32ByteSize(field_number, sfixed32): ...
def SFixed64ByteSize(field_number, sfixed64): ...
def FloatByteSize(field_number, flt): ...
def DoubleByteSize(field_number, double): ...
def BoolByteSize(field_number, b): ...
def EnumByteSize(field_number, enum): ...
def StringByteSize(field_number, string): ...
def BytesByteSize(field_number, b): ...
def GroupByteSize(field_number, message): ...
def MessageByteSize(field_number, message): ...
def MessageSetItemByteSize(field_number, msg): ...
def TagByteSize(field_number): ...

NON_PACKABLE_TYPES: Incomplete

def IsTypePackable(field_type): ...
