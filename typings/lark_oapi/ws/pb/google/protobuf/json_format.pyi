from _typeshed import Incomplete
from lark_oapi.ws.pb.google.protobuf import descriptor as descriptor, symbol_database as symbol_database
from lark_oapi.ws.pb.google.protobuf.internal import type_checkers as type_checkers

class Error(Exception): ...
class SerializeToJsonError(Error): ...
class ParseError(Error): ...

def MessageToJson(message, including_default_value_fields: bool = False, preserving_proto_field_name: bool = False, indent: int = 2, sort_keys: bool = False, use_integers_for_enums: bool = False, descriptor_pool=None, float_precision=None, ensure_ascii: bool = True): ...
def MessageToDict(message, including_default_value_fields: bool = False, preserving_proto_field_name: bool = False, use_integers_for_enums: bool = False, descriptor_pool=None, float_precision=None): ...

class _Printer:
    including_default_value_fields: Incomplete
    preserving_proto_field_name: Incomplete
    use_integers_for_enums: Incomplete
    descriptor_pool: Incomplete
    float_format: Incomplete
    def __init__(self, including_default_value_fields: bool = False, preserving_proto_field_name: bool = False, use_integers_for_enums: bool = False, descriptor_pool=None, float_precision=None) -> None: ...
    def ToJsonString(self, message, indent, sort_keys, ensure_ascii): ...

def Parse(text, message, ignore_unknown_fields: bool = False, descriptor_pool=None, max_recursion_depth: int = 100): ...
def ParseDict(js_dict, message, ignore_unknown_fields: bool = False, descriptor_pool=None, max_recursion_depth: int = 100): ...

class _Parser:
    ignore_unknown_fields: Incomplete
    descriptor_pool: Incomplete
    max_recursion_depth: Incomplete
    recursion_depth: int
    def __init__(self, ignore_unknown_fields, descriptor_pool, max_recursion_depth) -> None: ...
    def ConvertMessage(self, value, message, path) -> None: ...
